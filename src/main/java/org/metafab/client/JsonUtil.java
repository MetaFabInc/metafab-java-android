/**
 * MetaFab API
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.metafab.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import org.openapitools.client.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("AuthGame200Response".equalsIgnoreCase(className)) {
      return new TypeToken<List<AuthGame200Response>>(){}.getType();
    }
    
    if ("AuthGame200ResponseAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<AuthGame200ResponseAllOf>>(){}.getType();
    }
    
    if ("AuthGame200ResponseAllOf1".equalsIgnoreCase(className)) {
      return new TypeToken<List<AuthGame200ResponseAllOf1>>(){}.getType();
    }
    
    if ("AuthPlayer200Response".equalsIgnoreCase(className)) {
      return new TypeToken<List<AuthPlayer200Response>>(){}.getType();
    }
    
    if ("BatchTransferCurrencyRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<BatchTransferCurrencyRequest>>(){}.getType();
    }
    
    if ("BurnCurrencyRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<BurnCurrencyRequest>>(){}.getType();
    }
    
    if ("ContractModel".equalsIgnoreCase(className)) {
      return new TypeToken<List<ContractModel>>(){}.getType();
    }
    
    if ("CreateContractRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<CreateContractRequest>>(){}.getType();
    }
    
    if ("CreateCurrency200Response".equalsIgnoreCase(className)) {
      return new TypeToken<List<CreateCurrency200Response>>(){}.getType();
    }
    
    if ("CreateCurrency200ResponseAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<CreateCurrency200ResponseAllOf>>(){}.getType();
    }
    
    if ("CreateCurrency200ResponseAllOfContract".equalsIgnoreCase(className)) {
      return new TypeToken<List<CreateCurrency200ResponseAllOfContract>>(){}.getType();
    }
    
    if ("CreateCurrency200ResponseAllOfContractAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<CreateCurrency200ResponseAllOfContractAllOf>>(){}.getType();
    }
    
    if ("CreateCurrencyRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<CreateCurrencyRequest>>(){}.getType();
    }
    
    if ("CreateGameRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<CreateGameRequest>>(){}.getType();
    }
    
    if ("CreatePlayerRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<CreatePlayerRequest>>(){}.getType();
    }
    
    if ("CurrencyModel".equalsIgnoreCase(className)) {
      return new TypeToken<List<CurrencyModel>>(){}.getType();
    }
    
    if ("GameModel".equalsIgnoreCase(className)) {
      return new TypeToken<List<GameModel>>(){}.getType();
    }
    
    if ("GetCurrencies200ResponseInner".equalsIgnoreCase(className)) {
      return new TypeToken<List<GetCurrencies200ResponseInner>>(){}.getType();
    }
    
    if ("GetCurrencies200ResponseInnerAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<GetCurrencies200ResponseInnerAllOf>>(){}.getType();
    }
    
    if ("GetCurrencyFees200Response".equalsIgnoreCase(className)) {
      return new TypeToken<List<GetCurrencyFees200Response>>(){}.getType();
    }
    
    if ("MintCurrencyRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<MintCurrencyRequest>>(){}.getType();
    }
    
    if ("PlayerModel".equalsIgnoreCase(className)) {
      return new TypeToken<List<PlayerModel>>(){}.getType();
    }
    
    if ("SetCurrencyFeesRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<SetCurrencyFeesRequest>>(){}.getType();
    }
    
    if ("TransactionModel".equalsIgnoreCase(className)) {
      return new TypeToken<List<TransactionModel>>(){}.getType();
    }
    
    if ("TransferCurrencyRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<TransferCurrencyRequest>>(){}.getType();
    }
    
    if ("UpdateGameRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<UpdateGameRequest>>(){}.getType();
    }
    
    if ("UpdatePlayerRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<UpdatePlayerRequest>>(){}.getType();
    }
    
    if ("WalletModel".equalsIgnoreCase(className)) {
      return new TypeToken<List<WalletModel>>(){}.getType();
    }
    
    if ("WriteContractRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<WriteContractRequest>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("AuthGame200Response".equalsIgnoreCase(className)) {
      return new TypeToken<AuthGame200Response>(){}.getType();
    }
    
    if ("AuthGame200ResponseAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<AuthGame200ResponseAllOf>(){}.getType();
    }
    
    if ("AuthGame200ResponseAllOf1".equalsIgnoreCase(className)) {
      return new TypeToken<AuthGame200ResponseAllOf1>(){}.getType();
    }
    
    if ("AuthPlayer200Response".equalsIgnoreCase(className)) {
      return new TypeToken<AuthPlayer200Response>(){}.getType();
    }
    
    if ("BatchTransferCurrencyRequest".equalsIgnoreCase(className)) {
      return new TypeToken<BatchTransferCurrencyRequest>(){}.getType();
    }
    
    if ("BurnCurrencyRequest".equalsIgnoreCase(className)) {
      return new TypeToken<BurnCurrencyRequest>(){}.getType();
    }
    
    if ("ContractModel".equalsIgnoreCase(className)) {
      return new TypeToken<ContractModel>(){}.getType();
    }
    
    if ("CreateContractRequest".equalsIgnoreCase(className)) {
      return new TypeToken<CreateContractRequest>(){}.getType();
    }
    
    if ("CreateCurrency200Response".equalsIgnoreCase(className)) {
      return new TypeToken<CreateCurrency200Response>(){}.getType();
    }
    
    if ("CreateCurrency200ResponseAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<CreateCurrency200ResponseAllOf>(){}.getType();
    }
    
    if ("CreateCurrency200ResponseAllOfContract".equalsIgnoreCase(className)) {
      return new TypeToken<CreateCurrency200ResponseAllOfContract>(){}.getType();
    }
    
    if ("CreateCurrency200ResponseAllOfContractAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<CreateCurrency200ResponseAllOfContractAllOf>(){}.getType();
    }
    
    if ("CreateCurrencyRequest".equalsIgnoreCase(className)) {
      return new TypeToken<CreateCurrencyRequest>(){}.getType();
    }
    
    if ("CreateGameRequest".equalsIgnoreCase(className)) {
      return new TypeToken<CreateGameRequest>(){}.getType();
    }
    
    if ("CreatePlayerRequest".equalsIgnoreCase(className)) {
      return new TypeToken<CreatePlayerRequest>(){}.getType();
    }
    
    if ("CurrencyModel".equalsIgnoreCase(className)) {
      return new TypeToken<CurrencyModel>(){}.getType();
    }
    
    if ("GameModel".equalsIgnoreCase(className)) {
      return new TypeToken<GameModel>(){}.getType();
    }
    
    if ("GetCurrencies200ResponseInner".equalsIgnoreCase(className)) {
      return new TypeToken<GetCurrencies200ResponseInner>(){}.getType();
    }
    
    if ("GetCurrencies200ResponseInnerAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<GetCurrencies200ResponseInnerAllOf>(){}.getType();
    }
    
    if ("GetCurrencyFees200Response".equalsIgnoreCase(className)) {
      return new TypeToken<GetCurrencyFees200Response>(){}.getType();
    }
    
    if ("MintCurrencyRequest".equalsIgnoreCase(className)) {
      return new TypeToken<MintCurrencyRequest>(){}.getType();
    }
    
    if ("PlayerModel".equalsIgnoreCase(className)) {
      return new TypeToken<PlayerModel>(){}.getType();
    }
    
    if ("SetCurrencyFeesRequest".equalsIgnoreCase(className)) {
      return new TypeToken<SetCurrencyFeesRequest>(){}.getType();
    }
    
    if ("TransactionModel".equalsIgnoreCase(className)) {
      return new TypeToken<TransactionModel>(){}.getType();
    }
    
    if ("TransferCurrencyRequest".equalsIgnoreCase(className)) {
      return new TypeToken<TransferCurrencyRequest>(){}.getType();
    }
    
    if ("UpdateGameRequest".equalsIgnoreCase(className)) {
      return new TypeToken<UpdateGameRequest>(){}.getType();
    }
    
    if ("UpdatePlayerRequest".equalsIgnoreCase(className)) {
      return new TypeToken<UpdatePlayerRequest>(){}.getType();
    }
    
    if ("WalletModel".equalsIgnoreCase(className)) {
      return new TypeToken<WalletModel>(){}.getType();
    }
    
    if ("WriteContractRequest".equalsIgnoreCase(className)) {
      return new TypeToken<WriteContractRequest>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
