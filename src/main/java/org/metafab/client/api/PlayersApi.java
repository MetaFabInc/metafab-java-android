/**
 * MetaFab API
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.5.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.metafab.client.api;

import org.metafab.client.ApiInvoker;
import org.metafab.client.ApiException;
import org.metafab.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.AuthPlayer200Response;
import org.openapitools.client.model.CreatePlayerRequest;
import org.openapitools.client.model.GetPlayerData200Response;
import org.openapitools.client.model.PublicPlayer;
import org.openapitools.client.model.RemovePlayerConnectedWalletRequest;
import org.openapitools.client.model.SetPlayerConnectedWallet200Response;
import org.openapitools.client.model.SetPlayerConnectedWalletRequest;
import org.openapitools.client.model.SetPlayerDataRequest;
import org.openapitools.client.model.UpdatePlayer200Response;
import org.openapitools.client.model.UpdatePlayerRequest;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class PlayersApi {
  String basePath = "https://api.trymetafab.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Authenticate player
  * Returns an existing player object containing access token, wallet, and other details for a game when provided a valid username and password login using Basic Auth.
   * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.
   * @return AuthPlayer200Response
  */
  public AuthPlayer200Response authPlayer (String xGameKey) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'xGameKey' is set
    if (xGameKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGameKey' when calling authPlayer",
        new ApiException(400, "Missing the required parameter 'xGameKey' when calling authPlayer"));
    }

    // create path and map variables
    String path = "/v1/players/auth";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Game-Key", ApiInvoker.parameterToString(xGameKey));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AuthPlayer200Response) ApiInvoker.deserialize(localVarResponse, "", AuthPlayer200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Authenticate player
   * Returns an existing player object containing access token, wallet, and other details for a game when provided a valid username and password login using Basic Auth.
   * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.
  */
  public void authPlayer (String xGameKey, final Response.Listener<AuthPlayer200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'xGameKey' is set
    if (xGameKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGameKey' when calling authPlayer",
        new ApiException(400, "Missing the required parameter 'xGameKey' when calling authPlayer"));
    }

    // create path and map variables
    String path = "/v1/players/auth".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Game-Key", ApiInvoker.parameterToString(xGameKey));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AuthPlayer200Response) ApiInvoker.deserialize(localVarResponse,  "", AuthPlayer200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create player
  * Create a new player for a game. Players are automatically associated with an internally managed wallet.  Player access tokens can be used to directly interact with any MetaFab managed contracts, currencies, items collections, marketplaces and more. Player interactions are also gasless by default, completely removing all crypto friction for players to engage with your MetaFab supported games.
   * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.
   * @param createPlayerRequest 
   * @return AuthPlayer200Response
  */
  public AuthPlayer200Response createPlayer (String xGameKey, CreatePlayerRequest createPlayerRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = createPlayerRequest;
    // verify the required parameter 'xGameKey' is set
    if (xGameKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGameKey' when calling createPlayer",
        new ApiException(400, "Missing the required parameter 'xGameKey' when calling createPlayer"));
    }
    // verify the required parameter 'createPlayerRequest' is set
    if (createPlayerRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createPlayerRequest' when calling createPlayer",
        new ApiException(400, "Missing the required parameter 'createPlayerRequest' when calling createPlayer"));
    }

    // create path and map variables
    String path = "/v1/players";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Game-Key", ApiInvoker.parameterToString(xGameKey));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AuthPlayer200Response) ApiInvoker.deserialize(localVarResponse, "", AuthPlayer200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create player
   * Create a new player for a game. Players are automatically associated with an internally managed wallet.  Player access tokens can be used to directly interact with any MetaFab managed contracts, currencies, items collections, marketplaces and more. Player interactions are also gasless by default, completely removing all crypto friction for players to engage with your MetaFab supported games.
   * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.   * @param createPlayerRequest 
  */
  public void createPlayer (String xGameKey, CreatePlayerRequest createPlayerRequest, final Response.Listener<AuthPlayer200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = createPlayerRequest;

    // verify the required parameter 'xGameKey' is set
    if (xGameKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGameKey' when calling createPlayer",
        new ApiException(400, "Missing the required parameter 'xGameKey' when calling createPlayer"));
    }
    // verify the required parameter 'createPlayerRequest' is set
    if (createPlayerRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createPlayerRequest' when calling createPlayer",
        new ApiException(400, "Missing the required parameter 'createPlayerRequest' when calling createPlayer"));
    }

    // create path and map variables
    String path = "/v1/players".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Game-Key", ApiInvoker.parameterToString(xGameKey));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AuthPlayer200Response) ApiInvoker.deserialize(localVarResponse,  "", AuthPlayer200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get player
  * Returns a player object for the provided player id.
   * @param playerId Any player id within the MetaFab platform.
   * @return PublicPlayer
  */
  public PublicPlayer getPlayer (String playerId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'playerId' is set
    if (playerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'playerId' when calling getPlayer",
        new ApiException(400, "Missing the required parameter 'playerId' when calling getPlayer"));
    }

    // create path and map variables
    String path = "/v1/players/{playerId}".replaceAll("\\{" + "playerId" + "\\}", apiInvoker.escapeString(playerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PublicPlayer) ApiInvoker.deserialize(localVarResponse, "", PublicPlayer.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get player
   * Returns a player object for the provided player id.
   * @param playerId Any player id within the MetaFab platform.
  */
  public void getPlayer (String playerId, final Response.Listener<PublicPlayer> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'playerId' is set
    if (playerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'playerId' when calling getPlayer",
        new ApiException(400, "Missing the required parameter 'playerId' when calling getPlayer"));
    }

    // create path and map variables
    String path = "/v1/players/{playerId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "playerId" + "\\}", apiInvoker.escapeString(playerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PublicPlayer) ApiInvoker.deserialize(localVarResponse,  "", PublicPlayer.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get player data
  * Returns the latest public and protected data as an object for the provided playerId.
   * @param playerId Any player id within the MetaFab platform.
   * @return GetPlayerData200Response
  */
  public GetPlayerData200Response getPlayerData (String playerId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'playerId' is set
    if (playerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'playerId' when calling getPlayerData",
        new ApiException(400, "Missing the required parameter 'playerId' when calling getPlayerData"));
    }

    // create path and map variables
    String path = "/v1/players/{playerId}/data".replaceAll("\\{" + "playerId" + "\\}", apiInvoker.escapeString(playerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetPlayerData200Response) ApiInvoker.deserialize(localVarResponse, "", GetPlayerData200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get player data
   * Returns the latest public and protected data as an object for the provided playerId.
   * @param playerId Any player id within the MetaFab platform.
  */
  public void getPlayerData (String playerId, final Response.Listener<GetPlayerData200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'playerId' is set
    if (playerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'playerId' when calling getPlayerData",
        new ApiException(400, "Missing the required parameter 'playerId' when calling getPlayerData"));
    }

    // create path and map variables
    String path = "/v1/players/{playerId}/data".replaceAll("\\{format\\}","json").replaceAll("\\{" + "playerId" + "\\}", apiInvoker.escapeString(playerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetPlayerData200Response) ApiInvoker.deserialize(localVarResponse,  "", GetPlayerData200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get players
  * Returns all players for the authenticated game as an array of player objects.
   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.
   * @return List<PublicPlayer>
  */
  public List<PublicPlayer> getPlayers (String xAuthorization) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling getPlayers",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling getPlayers"));
    }

    // create path and map variables
    String path = "/v1/players";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<PublicPlayer>) ApiInvoker.deserialize(localVarResponse, "array", PublicPlayer.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get players
   * Returns all players for the authenticated game as an array of player objects.
   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.
  */
  public void getPlayers (String xAuthorization, final Response.Listener<List<PublicPlayer>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling getPlayers",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling getPlayers"));
    }

    // create path and map variables
    String path = "/v1/players".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<PublicPlayer>) ApiInvoker.deserialize(localVarResponse,  "array", PublicPlayer.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Remove player connected wallet
  * Removes an external wallet from a player account. The player&#39;s wallet is reverted to their custodial wallet.
   * @param playerId Any player id within the MetaFab platform.
   * @param playerWalletId Any player wallet id within the MetaFab platform.
   * @param removePlayerConnectedWalletRequest 
   * @return void
  */
  public void removePlayerConnectedWallet (String playerId, String playerWalletId, RemovePlayerConnectedWalletRequest removePlayerConnectedWalletRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = removePlayerConnectedWalletRequest;
    // verify the required parameter 'playerId' is set
    if (playerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'playerId' when calling removePlayerConnectedWallet",
        new ApiException(400, "Missing the required parameter 'playerId' when calling removePlayerConnectedWallet"));
    }
    // verify the required parameter 'playerWalletId' is set
    if (playerWalletId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'playerWalletId' when calling removePlayerConnectedWallet",
        new ApiException(400, "Missing the required parameter 'playerWalletId' when calling removePlayerConnectedWallet"));
    }
    // verify the required parameter 'removePlayerConnectedWalletRequest' is set
    if (removePlayerConnectedWalletRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'removePlayerConnectedWalletRequest' when calling removePlayerConnectedWallet",
        new ApiException(400, "Missing the required parameter 'removePlayerConnectedWalletRequest' when calling removePlayerConnectedWallet"));
    }

    // create path and map variables
    String path = "/v1/players/{playerId}/wallets/{playerWalletId}".replaceAll("\\{" + "playerId" + "\\}", apiInvoker.escapeString(playerId.toString())).replaceAll("\\{" + "playerWalletId" + "\\}", apiInvoker.escapeString(playerWalletId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Remove player connected wallet
   * Removes an external wallet from a player account. The player&#39;s wallet is reverted to their custodial wallet.
   * @param playerId Any player id within the MetaFab platform.   * @param playerWalletId Any player wallet id within the MetaFab platform.   * @param removePlayerConnectedWalletRequest 
  */
  public void removePlayerConnectedWallet (String playerId, String playerWalletId, RemovePlayerConnectedWalletRequest removePlayerConnectedWalletRequest, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = removePlayerConnectedWalletRequest;

    // verify the required parameter 'playerId' is set
    if (playerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'playerId' when calling removePlayerConnectedWallet",
        new ApiException(400, "Missing the required parameter 'playerId' when calling removePlayerConnectedWallet"));
    }
    // verify the required parameter 'playerWalletId' is set
    if (playerWalletId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'playerWalletId' when calling removePlayerConnectedWallet",
        new ApiException(400, "Missing the required parameter 'playerWalletId' when calling removePlayerConnectedWallet"));
    }
    // verify the required parameter 'removePlayerConnectedWalletRequest' is set
    if (removePlayerConnectedWalletRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'removePlayerConnectedWalletRequest' when calling removePlayerConnectedWallet",
        new ApiException(400, "Missing the required parameter 'removePlayerConnectedWalletRequest' when calling removePlayerConnectedWallet"));
    }

    // create path and map variables
    String path = "/v1/players/{playerId}/wallets/{playerWalletId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "playerId" + "\\}", apiInvoker.escapeString(playerId.toString())).replaceAll("\\{" + "playerWalletId" + "\\}", apiInvoker.escapeString(playerWalletId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Set player connected wallet
  * Sets an external wallet as the wallet for a player account. The set wallet can transact gaslessly with all MetaFab related systems through the same MetaFab API calls as custodial wallets without requiring transaction signing or private keys.  This is done through an internal system MetaFab has created that allows an external connected wallet to delegate transaction signing for a specific game&#39;s set of contracts to a player&#39;s password protected custodial wallet. This allow the custodial wallet to sign and submit transactions to a specific game&#39;s related contracts as if they were signed and submitted by the connected external wallet. This also means that all earned tokens, purchased items and any interactions happen and are recorded on chain as the external connected wallet. No additional logic needs to be writted by developers to support both custodial and external wallets, everything just works.  Finally, this endpoint is meant for advanced users. The majority of developers who want to implement external wallet support for their game can do so without any extra work through our whitelabeled wallet connection feature that implements this endpoint underneath the hood without any required work.
   * @param playerId The player id of the authenticating player.
   * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating player.
   * @param setPlayerConnectedWalletRequest 
   * @return SetPlayerConnectedWallet200Response
  */
  public SetPlayerConnectedWallet200Response setPlayerConnectedWallet (String playerId, String xAuthorization, SetPlayerConnectedWalletRequest setPlayerConnectedWalletRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = setPlayerConnectedWalletRequest;
    // verify the required parameter 'playerId' is set
    if (playerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'playerId' when calling setPlayerConnectedWallet",
        new ApiException(400, "Missing the required parameter 'playerId' when calling setPlayerConnectedWallet"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling setPlayerConnectedWallet",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling setPlayerConnectedWallet"));
    }
    // verify the required parameter 'setPlayerConnectedWalletRequest' is set
    if (setPlayerConnectedWalletRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'setPlayerConnectedWalletRequest' when calling setPlayerConnectedWallet",
        new ApiException(400, "Missing the required parameter 'setPlayerConnectedWalletRequest' when calling setPlayerConnectedWallet"));
    }

    // create path and map variables
    String path = "/v1/players/{playerId}/wallets".replaceAll("\\{" + "playerId" + "\\}", apiInvoker.escapeString(playerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SetPlayerConnectedWallet200Response) ApiInvoker.deserialize(localVarResponse, "", SetPlayerConnectedWallet200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Set player connected wallet
   * Sets an external wallet as the wallet for a player account. The set wallet can transact gaslessly with all MetaFab related systems through the same MetaFab API calls as custodial wallets without requiring transaction signing or private keys.  This is done through an internal system MetaFab has created that allows an external connected wallet to delegate transaction signing for a specific game&#39;s set of contracts to a player&#39;s password protected custodial wallet. This allow the custodial wallet to sign and submit transactions to a specific game&#39;s related contracts as if they were signed and submitted by the connected external wallet. This also means that all earned tokens, purchased items and any interactions happen and are recorded on chain as the external connected wallet. No additional logic needs to be writted by developers to support both custodial and external wallets, everything just works.  Finally, this endpoint is meant for advanced users. The majority of developers who want to implement external wallet support for their game can do so without any extra work through our whitelabeled wallet connection feature that implements this endpoint underneath the hood without any required work.
   * @param playerId The player id of the authenticating player.   * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating player.   * @param setPlayerConnectedWalletRequest 
  */
  public void setPlayerConnectedWallet (String playerId, String xAuthorization, SetPlayerConnectedWalletRequest setPlayerConnectedWalletRequest, final Response.Listener<SetPlayerConnectedWallet200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = setPlayerConnectedWalletRequest;

    // verify the required parameter 'playerId' is set
    if (playerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'playerId' when calling setPlayerConnectedWallet",
        new ApiException(400, "Missing the required parameter 'playerId' when calling setPlayerConnectedWallet"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling setPlayerConnectedWallet",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling setPlayerConnectedWallet"));
    }
    // verify the required parameter 'setPlayerConnectedWalletRequest' is set
    if (setPlayerConnectedWalletRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'setPlayerConnectedWalletRequest' when calling setPlayerConnectedWallet",
        new ApiException(400, "Missing the required parameter 'setPlayerConnectedWalletRequest' when calling setPlayerConnectedWallet"));
    }

    // create path and map variables
    String path = "/v1/players/{playerId}/wallets".replaceAll("\\{format\\}","json").replaceAll("\\{" + "playerId" + "\\}", apiInvoker.escapeString(playerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SetPlayerConnectedWallet200Response) ApiInvoker.deserialize(localVarResponse,  "", SetPlayerConnectedWallet200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Set player data
  * Creates or updates public and/or protected data for the provided playerId. Data updates are performed using deep merging. This means that when you update any top level or nested properties specific to player public or protected data, you only need to include the properties you are making changes to. Any existing properties not included in request body arguments will be retained on the player data object.  Please note, When writing an array type for a player, arrays do not follow the deep merge approach. If you add or remove an item from an array, the entire array must be passed as an argument when updating the related property for player public or protected data.
   * @param playerId Any player id within the MetaFab platform.
   * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.
   * @param setPlayerDataRequest 
   * @return GetPlayerData200Response
  */
  public GetPlayerData200Response setPlayerData (String playerId, String xAuthorization, SetPlayerDataRequest setPlayerDataRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = setPlayerDataRequest;
    // verify the required parameter 'playerId' is set
    if (playerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'playerId' when calling setPlayerData",
        new ApiException(400, "Missing the required parameter 'playerId' when calling setPlayerData"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling setPlayerData",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling setPlayerData"));
    }
    // verify the required parameter 'setPlayerDataRequest' is set
    if (setPlayerDataRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'setPlayerDataRequest' when calling setPlayerData",
        new ApiException(400, "Missing the required parameter 'setPlayerDataRequest' when calling setPlayerData"));
    }

    // create path and map variables
    String path = "/v1/players/{playerId}/data".replaceAll("\\{" + "playerId" + "\\}", apiInvoker.escapeString(playerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetPlayerData200Response) ApiInvoker.deserialize(localVarResponse, "", GetPlayerData200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Set player data
   * Creates or updates public and/or protected data for the provided playerId. Data updates are performed using deep merging. This means that when you update any top level or nested properties specific to player public or protected data, you only need to include the properties you are making changes to. Any existing properties not included in request body arguments will be retained on the player data object.  Please note, When writing an array type for a player, arrays do not follow the deep merge approach. If you add or remove an item from an array, the entire array must be passed as an argument when updating the related property for player public or protected data.
   * @param playerId Any player id within the MetaFab platform.   * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.   * @param setPlayerDataRequest 
  */
  public void setPlayerData (String playerId, String xAuthorization, SetPlayerDataRequest setPlayerDataRequest, final Response.Listener<GetPlayerData200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = setPlayerDataRequest;

    // verify the required parameter 'playerId' is set
    if (playerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'playerId' when calling setPlayerData",
        new ApiException(400, "Missing the required parameter 'playerId' when calling setPlayerData"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling setPlayerData",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling setPlayerData"));
    }
    // verify the required parameter 'setPlayerDataRequest' is set
    if (setPlayerDataRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'setPlayerDataRequest' when calling setPlayerData",
        new ApiException(400, "Missing the required parameter 'setPlayerDataRequest' when calling setPlayerData"));
    }

    // create path and map variables
    String path = "/v1/players/{playerId}/data".replaceAll("\\{format\\}","json").replaceAll("\\{" + "playerId" + "\\}", apiInvoker.escapeString(playerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetPlayerData200Response) ApiInvoker.deserialize(localVarResponse,  "", GetPlayerData200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update player
  * Update various fields specific to a player. Such as changing its password and resetting its access token.
   * @param playerId The player id of the authenticating player.
   * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating player.
   * @param updatePlayerRequest 
   * @return UpdatePlayer200Response
  */
  public UpdatePlayer200Response updatePlayer (String playerId, String xAuthorization, UpdatePlayerRequest updatePlayerRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = updatePlayerRequest;
    // verify the required parameter 'playerId' is set
    if (playerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'playerId' when calling updatePlayer",
        new ApiException(400, "Missing the required parameter 'playerId' when calling updatePlayer"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling updatePlayer",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling updatePlayer"));
    }
    // verify the required parameter 'updatePlayerRequest' is set
    if (updatePlayerRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'updatePlayerRequest' when calling updatePlayer",
        new ApiException(400, "Missing the required parameter 'updatePlayerRequest' when calling updatePlayer"));
    }

    // create path and map variables
    String path = "/v1/players/{playerId}".replaceAll("\\{" + "playerId" + "\\}", apiInvoker.escapeString(playerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UpdatePlayer200Response) ApiInvoker.deserialize(localVarResponse, "", UpdatePlayer200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update player
   * Update various fields specific to a player. Such as changing its password and resetting its access token.
   * @param playerId The player id of the authenticating player.   * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating player.   * @param updatePlayerRequest 
  */
  public void updatePlayer (String playerId, String xAuthorization, UpdatePlayerRequest updatePlayerRequest, final Response.Listener<UpdatePlayer200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = updatePlayerRequest;

    // verify the required parameter 'playerId' is set
    if (playerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'playerId' when calling updatePlayer",
        new ApiException(400, "Missing the required parameter 'playerId' when calling updatePlayer"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling updatePlayer",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling updatePlayer"));
    }
    // verify the required parameter 'updatePlayerRequest' is set
    if (updatePlayerRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'updatePlayerRequest' when calling updatePlayer",
        new ApiException(400, "Missing the required parameter 'updatePlayerRequest' when calling updatePlayer"));
    }

    // create path and map variables
    String path = "/v1/players/{playerId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "playerId" + "\\}", apiInvoker.escapeString(playerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UpdatePlayer200Response) ApiInvoker.deserialize(localVarResponse,  "", UpdatePlayer200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
