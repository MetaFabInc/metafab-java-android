/**
 * MetaFab API
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.metafab.client.api;

import org.metafab.client.ApiInvoker;
import org.metafab.client.ApiException;
import org.metafab.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.AuthPlayer200Response;
import org.openapitools.client.model.CreatePlayerRequest;
import org.openapitools.client.model.PlayerModel;
import org.openapitools.client.model.UpdatePlayerRequest;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class PlayersApi {
  String basePath = "https://api.trymetafab.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Authenticate player
  * Returns an existing player object containing access token, wallet, and other details for a game when provided a valid username and password login using Basic Auth.
   * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.
   * @return AuthPlayer200Response
  */
  public AuthPlayer200Response authPlayer (String xGameKey) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'xGameKey' is set
    if (xGameKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGameKey' when calling authPlayer",
        new ApiException(400, "Missing the required parameter 'xGameKey' when calling authPlayer"));
    }

    // create path and map variables
    String path = "/v1/players";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Game-Key", ApiInvoker.parameterToString(xGameKey));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AuthPlayer200Response) ApiInvoker.deserialize(localVarResponse, "", AuthPlayer200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Authenticate player
   * Returns an existing player object containing access token, wallet, and other details for a game when provided a valid username and password login using Basic Auth.
   * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.
  */
  public void authPlayer (String xGameKey, final Response.Listener<AuthPlayer200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'xGameKey' is set
    if (xGameKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGameKey' when calling authPlayer",
        new ApiException(400, "Missing the required parameter 'xGameKey' when calling authPlayer"));
    }

    // create path and map variables
    String path = "/v1/players".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Game-Key", ApiInvoker.parameterToString(xGameKey));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AuthPlayer200Response) ApiInvoker.deserialize(localVarResponse,  "", AuthPlayer200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create player
  * Create a new player for a game. Players are automatically associated with an internally managed wallet.  Player access tokens can be used to directly interact with any MetaFab managed contracts, currencies, items collections, marketplaces and more. Player interactions are also gasless by default, completely removing all crypto friction for players to engage with your MetaFab supported games.
   * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.
   * @param createPlayerRequest 
   * @return AuthPlayer200Response
  */
  public AuthPlayer200Response createPlayer (String xGameKey, CreatePlayerRequest createPlayerRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = createPlayerRequest;
    // verify the required parameter 'xGameKey' is set
    if (xGameKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGameKey' when calling createPlayer",
        new ApiException(400, "Missing the required parameter 'xGameKey' when calling createPlayer"));
    }
    // verify the required parameter 'createPlayerRequest' is set
    if (createPlayerRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createPlayerRequest' when calling createPlayer",
        new ApiException(400, "Missing the required parameter 'createPlayerRequest' when calling createPlayer"));
    }

    // create path and map variables
    String path = "/v1/players";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Game-Key", ApiInvoker.parameterToString(xGameKey));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AuthPlayer200Response) ApiInvoker.deserialize(localVarResponse, "", AuthPlayer200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create player
   * Create a new player for a game. Players are automatically associated with an internally managed wallet.  Player access tokens can be used to directly interact with any MetaFab managed contracts, currencies, items collections, marketplaces and more. Player interactions are also gasless by default, completely removing all crypto friction for players to engage with your MetaFab supported games.
   * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.   * @param createPlayerRequest 
  */
  public void createPlayer (String xGameKey, CreatePlayerRequest createPlayerRequest, final Response.Listener<AuthPlayer200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = createPlayerRequest;

    // verify the required parameter 'xGameKey' is set
    if (xGameKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGameKey' when calling createPlayer",
        new ApiException(400, "Missing the required parameter 'xGameKey' when calling createPlayer"));
    }
    // verify the required parameter 'createPlayerRequest' is set
    if (createPlayerRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createPlayerRequest' when calling createPlayer",
        new ApiException(400, "Missing the required parameter 'createPlayerRequest' when calling createPlayer"));
    }

    // create path and map variables
    String path = "/v1/players".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Game-Key", ApiInvoker.parameterToString(xGameKey));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AuthPlayer200Response) ApiInvoker.deserialize(localVarResponse,  "", AuthPlayer200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update player
  * Update various fields specific to a player. Such as changing its password and resetting its access token.
   * @param playerId Any player id within the MetaFab ecosystem.
   * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating player.
   * @param updatePlayerRequest 
   * @return PlayerModel
  */
  public PlayerModel updatePlayer (String playerId, String xAuthorization, UpdatePlayerRequest updatePlayerRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = updatePlayerRequest;
    // verify the required parameter 'playerId' is set
    if (playerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'playerId' when calling updatePlayer",
        new ApiException(400, "Missing the required parameter 'playerId' when calling updatePlayer"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling updatePlayer",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling updatePlayer"));
    }
    // verify the required parameter 'updatePlayerRequest' is set
    if (updatePlayerRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'updatePlayerRequest' when calling updatePlayer",
        new ApiException(400, "Missing the required parameter 'updatePlayerRequest' when calling updatePlayer"));
    }

    // create path and map variables
    String path = "/v1/players/{playerId}".replaceAll("\\{" + "playerId" + "\\}", apiInvoker.escapeString(playerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PlayerModel) ApiInvoker.deserialize(localVarResponse, "", PlayerModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update player
   * Update various fields specific to a player. Such as changing its password and resetting its access token.
   * @param playerId Any player id within the MetaFab ecosystem.   * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating player.   * @param updatePlayerRequest 
  */
  public void updatePlayer (String playerId, String xAuthorization, UpdatePlayerRequest updatePlayerRequest, final Response.Listener<PlayerModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = updatePlayerRequest;

    // verify the required parameter 'playerId' is set
    if (playerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'playerId' when calling updatePlayer",
        new ApiException(400, "Missing the required parameter 'playerId' when calling updatePlayer"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling updatePlayer",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling updatePlayer"));
    }
    // verify the required parameter 'updatePlayerRequest' is set
    if (updatePlayerRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'updatePlayerRequest' when calling updatePlayer",
        new ApiException(400, "Missing the required parameter 'updatePlayerRequest' when calling updatePlayer"));
    }

    // create path and map variables
    String path = "/v1/players/{playerId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "playerId" + "\\}", apiInvoker.escapeString(playerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PlayerModel) ApiInvoker.deserialize(localVarResponse,  "", PlayerModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
