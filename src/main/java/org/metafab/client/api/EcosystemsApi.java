/**
 * MetaFab API
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.5.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.metafab.client.api;

import org.metafab.client.ApiInvoker;
import org.metafab.client.ApiException;
import org.metafab.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.ApproveEcosystemGameRequest;
import org.openapitools.client.model.AuthPlayer200Response;
import org.openapitools.client.model.AuthProfile200Response;
import org.openapitools.client.model.CreateEcosystemRequest;
import org.openapitools.client.model.CreateProfilePlayerRequest;
import org.openapitools.client.model.CreateProfileRequest;
import org.openapitools.client.model.EcosystemModel;
import org.openapitools.client.model.GetProfileGames200ResponseInner;
import org.openapitools.client.model.ProfileModel;
import org.openapitools.client.model.PublicEcosystem;
import org.openapitools.client.model.PublicGame;
import org.openapitools.client.model.UpdateEcosystemRequest;
import org.openapitools.client.model.UpdateProfilePlayer200Response;
import org.openapitools.client.model.UpdateProfilePlayerRequest;
import org.openapitools.client.model.UpdateProfileRequest;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class EcosystemsApi {
  String basePath = "https://api.trymetafab.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Approve ecosystem game
  * Approves a game for an ecosystem. By approving a game, it allows that game to integrate the ability for profile accounts from an ecosystem to login directly to the approved game and play. This also allows games to request access to assets held at the profile level for the game to frictionlessly interact with on behalf of the profile.
   * @param ecosystemId The ecosystem id of the authenticating ecosystem.
   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating ecosystem.
   * @param approveEcosystemGameRequest 
   * @return void
  */
  public void approveEcosystemGame (String ecosystemId, String xAuthorization, ApproveEcosystemGameRequest approveEcosystemGameRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = approveEcosystemGameRequest;
    // verify the required parameter 'ecosystemId' is set
    if (ecosystemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ecosystemId' when calling approveEcosystemGame",
        new ApiException(400, "Missing the required parameter 'ecosystemId' when calling approveEcosystemGame"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling approveEcosystemGame",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling approveEcosystemGame"));
    }
    // verify the required parameter 'approveEcosystemGameRequest' is set
    if (approveEcosystemGameRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'approveEcosystemGameRequest' when calling approveEcosystemGame",
        new ApiException(400, "Missing the required parameter 'approveEcosystemGameRequest' when calling approveEcosystemGame"));
    }

    // create path and map variables
    String path = "/v1/ecosystems/{ecosystemId}/games".replaceAll("\\{" + "ecosystemId" + "\\}", apiInvoker.escapeString(ecosystemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Approve ecosystem game
   * Approves a game for an ecosystem. By approving a game, it allows that game to integrate the ability for profile accounts from an ecosystem to login directly to the approved game and play. This also allows games to request access to assets held at the profile level for the game to frictionlessly interact with on behalf of the profile.
   * @param ecosystemId The ecosystem id of the authenticating ecosystem.   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating ecosystem.   * @param approveEcosystemGameRequest 
  */
  public void approveEcosystemGame (String ecosystemId, String xAuthorization, ApproveEcosystemGameRequest approveEcosystemGameRequest, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = approveEcosystemGameRequest;

    // verify the required parameter 'ecosystemId' is set
    if (ecosystemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ecosystemId' when calling approveEcosystemGame",
        new ApiException(400, "Missing the required parameter 'ecosystemId' when calling approveEcosystemGame"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling approveEcosystemGame",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling approveEcosystemGame"));
    }
    // verify the required parameter 'approveEcosystemGameRequest' is set
    if (approveEcosystemGameRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'approveEcosystemGameRequest' when calling approveEcosystemGame",
        new ApiException(400, "Missing the required parameter 'approveEcosystemGameRequest' when calling approveEcosystemGame"));
    }

    // create path and map variables
    String path = "/v1/ecosystems/{ecosystemId}/games".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ecosystemId" + "\\}", apiInvoker.escapeString(ecosystemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Authenticate ecosystem
  * Returns an existing ecosystem object containing authorization keys when provided a valid email (in place of username) and password login using Basic Auth.
   * @return EcosystemModel
  */
  public EcosystemModel authEcosystem () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/v1/ecosystems/auth";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EcosystemModel) ApiInvoker.deserialize(localVarResponse, "", EcosystemModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Authenticate ecosystem
   * Returns an existing ecosystem object containing authorization keys when provided a valid email (in place of username) and password login using Basic Auth.

  */
  public void authEcosystem (final Response.Listener<EcosystemModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/v1/ecosystems/auth".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EcosystemModel) ApiInvoker.deserialize(localVarResponse,  "", EcosystemModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Authenticate profile
  * Returns an existing profile object containing access token, wallet, and other details when provided a valid profile username and password login using Basic Auth.
   * @param xEcosystemKey The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc.
   * @return AuthProfile200Response
  */
  public AuthProfile200Response authProfile (String xEcosystemKey) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'xEcosystemKey' is set
    if (xEcosystemKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xEcosystemKey' when calling authProfile",
        new ApiException(400, "Missing the required parameter 'xEcosystemKey' when calling authProfile"));
    }

    // create path and map variables
    String path = "/v1/profiles/auth";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Ecosystem-Key", ApiInvoker.parameterToString(xEcosystemKey));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AuthProfile200Response) ApiInvoker.deserialize(localVarResponse, "", AuthProfile200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Authenticate profile
   * Returns an existing profile object containing access token, wallet, and other details when provided a valid profile username and password login using Basic Auth.
   * @param xEcosystemKey The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc.
  */
  public void authProfile (String xEcosystemKey, final Response.Listener<AuthProfile200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'xEcosystemKey' is set
    if (xEcosystemKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xEcosystemKey' when calling authProfile",
        new ApiException(400, "Missing the required parameter 'xEcosystemKey' when calling authProfile"));
    }

    // create path and map variables
    String path = "/v1/profiles/auth".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Ecosystem-Key", ApiInvoker.parameterToString(xEcosystemKey));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AuthProfile200Response) ApiInvoker.deserialize(localVarResponse,  "", AuthProfile200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Authenticate profile player
  * Returns an existing player object containing access token, wallet, wallet decrypt key, profile authorization and other details for a game when provided profile authentication and the player&#39;s username.
   * @param profileId The profile id of the authenticating profile.
   * @param gameId Any game id within the MetaFab platform.
   * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile.
   * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.
   * @param xUsername The username of a player.
   * @return AuthPlayer200Response
  */
  public AuthPlayer200Response authProfilePlayer (String profileId, String gameId, String xAuthorization, String xWalletDecryptKey, String xUsername) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'profileId' is set
    if (profileId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'profileId' when calling authProfilePlayer",
        new ApiException(400, "Missing the required parameter 'profileId' when calling authProfilePlayer"));
    }
    // verify the required parameter 'gameId' is set
    if (gameId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'gameId' when calling authProfilePlayer",
        new ApiException(400, "Missing the required parameter 'gameId' when calling authProfilePlayer"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling authProfilePlayer",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling authProfilePlayer"));
    }
    // verify the required parameter 'xWalletDecryptKey' is set
    if (xWalletDecryptKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xWalletDecryptKey' when calling authProfilePlayer",
        new ApiException(400, "Missing the required parameter 'xWalletDecryptKey' when calling authProfilePlayer"));
    }
    // verify the required parameter 'xUsername' is set
    if (xUsername == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xUsername' when calling authProfilePlayer",
        new ApiException(400, "Missing the required parameter 'xUsername' when calling authProfilePlayer"));
    }

    // create path and map variables
    String path = "/v1/profiles/{profileId}/games/{gameId}/players/auth".replaceAll("\\{" + "profileId" + "\\}", apiInvoker.escapeString(profileId.toString())).replaceAll("\\{" + "gameId" + "\\}", apiInvoker.escapeString(gameId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Wallet-Decrypt-Key", ApiInvoker.parameterToString(xWalletDecryptKey));
    headerParams.put("X-Username", ApiInvoker.parameterToString(xUsername));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AuthPlayer200Response) ApiInvoker.deserialize(localVarResponse, "", AuthPlayer200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Authenticate profile player
   * Returns an existing player object containing access token, wallet, wallet decrypt key, profile authorization and other details for a game when provided profile authentication and the player&#39;s username.
   * @param profileId The profile id of the authenticating profile.   * @param gameId Any game id within the MetaFab platform.   * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile.   * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.   * @param xUsername The username of a player.
  */
  public void authProfilePlayer (String profileId, String gameId, String xAuthorization, String xWalletDecryptKey, String xUsername, final Response.Listener<AuthPlayer200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'profileId' is set
    if (profileId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'profileId' when calling authProfilePlayer",
        new ApiException(400, "Missing the required parameter 'profileId' when calling authProfilePlayer"));
    }
    // verify the required parameter 'gameId' is set
    if (gameId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'gameId' when calling authProfilePlayer",
        new ApiException(400, "Missing the required parameter 'gameId' when calling authProfilePlayer"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling authProfilePlayer",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling authProfilePlayer"));
    }
    // verify the required parameter 'xWalletDecryptKey' is set
    if (xWalletDecryptKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xWalletDecryptKey' when calling authProfilePlayer",
        new ApiException(400, "Missing the required parameter 'xWalletDecryptKey' when calling authProfilePlayer"));
    }
    // verify the required parameter 'xUsername' is set
    if (xUsername == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xUsername' when calling authProfilePlayer",
        new ApiException(400, "Missing the required parameter 'xUsername' when calling authProfilePlayer"));
    }

    // create path and map variables
    String path = "/v1/profiles/{profileId}/games/{gameId}/players/auth".replaceAll("\\{format\\}","json").replaceAll("\\{" + "profileId" + "\\}", apiInvoker.escapeString(profileId.toString())).replaceAll("\\{" + "gameId" + "\\}", apiInvoker.escapeString(gameId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Wallet-Decrypt-Key", ApiInvoker.parameterToString(xWalletDecryptKey));
    headerParams.put("X-Username", ApiInvoker.parameterToString(xUsername));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AuthPlayer200Response) ApiInvoker.deserialize(localVarResponse,  "", AuthPlayer200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create ecosystem
  * Create a new ecosystem. An ecosystem is a parent entity that many profiles live under for a given ecosystem of games. Ecosystems allow your players to create one profile within your ecosystem that allows a single account and wallet to be used across all of the approved games in your ecosystem that they play.
   * @param createEcosystemRequest 
   * @return EcosystemModel
  */
  public EcosystemModel createEcosystem (CreateEcosystemRequest createEcosystemRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = createEcosystemRequest;
    // verify the required parameter 'createEcosystemRequest' is set
    if (createEcosystemRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createEcosystemRequest' when calling createEcosystem",
        new ApiException(400, "Missing the required parameter 'createEcosystemRequest' when calling createEcosystem"));
    }

    // create path and map variables
    String path = "/v1/ecosystems";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EcosystemModel) ApiInvoker.deserialize(localVarResponse, "", EcosystemModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create ecosystem
   * Create a new ecosystem. An ecosystem is a parent entity that many profiles live under for a given ecosystem of games. Ecosystems allow your players to create one profile within your ecosystem that allows a single account and wallet to be used across all of the approved games in your ecosystem that they play.
   * @param createEcosystemRequest 
  */
  public void createEcosystem (CreateEcosystemRequest createEcosystemRequest, final Response.Listener<EcosystemModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = createEcosystemRequest;

    // verify the required parameter 'createEcosystemRequest' is set
    if (createEcosystemRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createEcosystemRequest' when calling createEcosystem",
        new ApiException(400, "Missing the required parameter 'createEcosystemRequest' when calling createEcosystem"));
    }

    // create path and map variables
    String path = "/v1/ecosystems".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EcosystemModel) ApiInvoker.deserialize(localVarResponse,  "", EcosystemModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create profile
  * Create a new profile. Profiles are automatically associated with an internally managed wallet. Profiles can be thought of as a umbrella account that can be used to sign into and create player accounts across many games and have a singular asset store wallet at the profile level that can be used across all connected player accounts for games those player accounts are a part of.  Profiles are associated to a parent ecosystem of games. This allows an ecosystem to approve a permissioned set of games that can request authorized wallet permissions from profiles of players for their game.
   * @param xEcosystemKey The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc.
   * @param createProfileRequest 
   * @return AuthProfile200Response
  */
  public AuthProfile200Response createProfile (String xEcosystemKey, CreateProfileRequest createProfileRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = createProfileRequest;
    // verify the required parameter 'xEcosystemKey' is set
    if (xEcosystemKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xEcosystemKey' when calling createProfile",
        new ApiException(400, "Missing the required parameter 'xEcosystemKey' when calling createProfile"));
    }
    // verify the required parameter 'createProfileRequest' is set
    if (createProfileRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createProfileRequest' when calling createProfile",
        new ApiException(400, "Missing the required parameter 'createProfileRequest' when calling createProfile"));
    }

    // create path and map variables
    String path = "/v1/profiles";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Ecosystem-Key", ApiInvoker.parameterToString(xEcosystemKey));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AuthProfile200Response) ApiInvoker.deserialize(localVarResponse, "", AuthProfile200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create profile
   * Create a new profile. Profiles are automatically associated with an internally managed wallet. Profiles can be thought of as a umbrella account that can be used to sign into and create player accounts across many games and have a singular asset store wallet at the profile level that can be used across all connected player accounts for games those player accounts are a part of.  Profiles are associated to a parent ecosystem of games. This allows an ecosystem to approve a permissioned set of games that can request authorized wallet permissions from profiles of players for their game.
   * @param xEcosystemKey The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc.   * @param createProfileRequest 
  */
  public void createProfile (String xEcosystemKey, CreateProfileRequest createProfileRequest, final Response.Listener<AuthProfile200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = createProfileRequest;

    // verify the required parameter 'xEcosystemKey' is set
    if (xEcosystemKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xEcosystemKey' when calling createProfile",
        new ApiException(400, "Missing the required parameter 'xEcosystemKey' when calling createProfile"));
    }
    // verify the required parameter 'createProfileRequest' is set
    if (createProfileRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createProfileRequest' when calling createProfile",
        new ApiException(400, "Missing the required parameter 'createProfileRequest' when calling createProfile"));
    }

    // create path and map variables
    String path = "/v1/profiles".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Ecosystem-Key", ApiInvoker.parameterToString(xEcosystemKey));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AuthProfile200Response) ApiInvoker.deserialize(localVarResponse,  "", AuthProfile200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create profile player
  * Creates a new player account for the provided game id linked to the authenticating profile. The created player account will default to using the parent profile&#39;s wallet for any transactions, wallet content balance checks and verifications, and more.
   * @param profileId The profile id of the authenticating profile.
   * @param gameId Any game id within the MetaFab platform.
   * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile.
   * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.
   * @param createProfilePlayerRequest 
   * @return AuthPlayer200Response
  */
  public AuthPlayer200Response createProfilePlayer (String profileId, String gameId, String xAuthorization, String xWalletDecryptKey, CreateProfilePlayerRequest createProfilePlayerRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = createProfilePlayerRequest;
    // verify the required parameter 'profileId' is set
    if (profileId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'profileId' when calling createProfilePlayer",
        new ApiException(400, "Missing the required parameter 'profileId' when calling createProfilePlayer"));
    }
    // verify the required parameter 'gameId' is set
    if (gameId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'gameId' when calling createProfilePlayer",
        new ApiException(400, "Missing the required parameter 'gameId' when calling createProfilePlayer"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling createProfilePlayer",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling createProfilePlayer"));
    }
    // verify the required parameter 'xWalletDecryptKey' is set
    if (xWalletDecryptKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xWalletDecryptKey' when calling createProfilePlayer",
        new ApiException(400, "Missing the required parameter 'xWalletDecryptKey' when calling createProfilePlayer"));
    }
    // verify the required parameter 'createProfilePlayerRequest' is set
    if (createProfilePlayerRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createProfilePlayerRequest' when calling createProfilePlayer",
        new ApiException(400, "Missing the required parameter 'createProfilePlayerRequest' when calling createProfilePlayer"));
    }

    // create path and map variables
    String path = "/v1/profiles/{profileId}/games/{gameId}/players".replaceAll("\\{" + "profileId" + "\\}", apiInvoker.escapeString(profileId.toString())).replaceAll("\\{" + "gameId" + "\\}", apiInvoker.escapeString(gameId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Wallet-Decrypt-Key", ApiInvoker.parameterToString(xWalletDecryptKey));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AuthPlayer200Response) ApiInvoker.deserialize(localVarResponse, "", AuthPlayer200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create profile player
   * Creates a new player account for the provided game id linked to the authenticating profile. The created player account will default to using the parent profile&#39;s wallet for any transactions, wallet content balance checks and verifications, and more.
   * @param profileId The profile id of the authenticating profile.   * @param gameId Any game id within the MetaFab platform.   * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile.   * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.   * @param createProfilePlayerRequest 
  */
  public void createProfilePlayer (String profileId, String gameId, String xAuthorization, String xWalletDecryptKey, CreateProfilePlayerRequest createProfilePlayerRequest, final Response.Listener<AuthPlayer200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = createProfilePlayerRequest;

    // verify the required parameter 'profileId' is set
    if (profileId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'profileId' when calling createProfilePlayer",
        new ApiException(400, "Missing the required parameter 'profileId' when calling createProfilePlayer"));
    }
    // verify the required parameter 'gameId' is set
    if (gameId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'gameId' when calling createProfilePlayer",
        new ApiException(400, "Missing the required parameter 'gameId' when calling createProfilePlayer"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling createProfilePlayer",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling createProfilePlayer"));
    }
    // verify the required parameter 'xWalletDecryptKey' is set
    if (xWalletDecryptKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xWalletDecryptKey' when calling createProfilePlayer",
        new ApiException(400, "Missing the required parameter 'xWalletDecryptKey' when calling createProfilePlayer"));
    }
    // verify the required parameter 'createProfilePlayerRequest' is set
    if (createProfilePlayerRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createProfilePlayerRequest' when calling createProfilePlayer",
        new ApiException(400, "Missing the required parameter 'createProfilePlayerRequest' when calling createProfilePlayer"));
    }

    // create path and map variables
    String path = "/v1/profiles/{profileId}/games/{gameId}/players".replaceAll("\\{format\\}","json").replaceAll("\\{" + "profileId" + "\\}", apiInvoker.escapeString(profileId.toString())).replaceAll("\\{" + "gameId" + "\\}", apiInvoker.escapeString(gameId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Wallet-Decrypt-Key", ApiInvoker.parameterToString(xWalletDecryptKey));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AuthPlayer200Response) ApiInvoker.deserialize(localVarResponse,  "", AuthPlayer200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get ecosystem
  * Returns a ecosystem object for the provided ecosystem id.
   * @param ecosystemId Any ecosystem id within the MetaFab platform.
   * @return PublicEcosystem
  */
  public PublicEcosystem getEcosystem (String ecosystemId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'ecosystemId' is set
    if (ecosystemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ecosystemId' when calling getEcosystem",
        new ApiException(400, "Missing the required parameter 'ecosystemId' when calling getEcosystem"));
    }

    // create path and map variables
    String path = "/v1/ecosystems/{ecosystemId}".replaceAll("\\{" + "ecosystemId" + "\\}", apiInvoker.escapeString(ecosystemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PublicEcosystem) ApiInvoker.deserialize(localVarResponse, "", PublicEcosystem.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get ecosystem
   * Returns a ecosystem object for the provided ecosystem id.
   * @param ecosystemId Any ecosystem id within the MetaFab platform.
  */
  public void getEcosystem (String ecosystemId, final Response.Listener<PublicEcosystem> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'ecosystemId' is set
    if (ecosystemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ecosystemId' when calling getEcosystem",
        new ApiException(400, "Missing the required parameter 'ecosystemId' when calling getEcosystem"));
    }

    // create path and map variables
    String path = "/v1/ecosystems/{ecosystemId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ecosystemId" + "\\}", apiInvoker.escapeString(ecosystemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PublicEcosystem) ApiInvoker.deserialize(localVarResponse,  "", PublicEcosystem.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get ecosystem game
  * Returns a game object for the provided game id that the ecosystem has approved.
   * @param ecosystemId Any ecosystem id within the MetaFab platform.
   * @param gameId Any game id within the MetaFab platform.
   * @return PublicGame
  */
  public PublicGame getEcosystemGame (String ecosystemId, String gameId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'ecosystemId' is set
    if (ecosystemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ecosystemId' when calling getEcosystemGame",
        new ApiException(400, "Missing the required parameter 'ecosystemId' when calling getEcosystemGame"));
    }
    // verify the required parameter 'gameId' is set
    if (gameId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'gameId' when calling getEcosystemGame",
        new ApiException(400, "Missing the required parameter 'gameId' when calling getEcosystemGame"));
    }

    // create path and map variables
    String path = "/v1/ecosystems/{ecosystemId}/games/{gameId}".replaceAll("\\{" + "ecosystemId" + "\\}", apiInvoker.escapeString(ecosystemId.toString())).replaceAll("\\{" + "gameId" + "\\}", apiInvoker.escapeString(gameId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PublicGame) ApiInvoker.deserialize(localVarResponse, "", PublicGame.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get ecosystem game
   * Returns a game object for the provided game id that the ecosystem has approved.
   * @param ecosystemId Any ecosystem id within the MetaFab platform.   * @param gameId Any game id within the MetaFab platform.
  */
  public void getEcosystemGame (String ecosystemId, String gameId, final Response.Listener<PublicGame> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'ecosystemId' is set
    if (ecosystemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ecosystemId' when calling getEcosystemGame",
        new ApiException(400, "Missing the required parameter 'ecosystemId' when calling getEcosystemGame"));
    }
    // verify the required parameter 'gameId' is set
    if (gameId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'gameId' when calling getEcosystemGame",
        new ApiException(400, "Missing the required parameter 'gameId' when calling getEcosystemGame"));
    }

    // create path and map variables
    String path = "/v1/ecosystems/{ecosystemId}/games/{gameId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ecosystemId" + "\\}", apiInvoker.escapeString(ecosystemId.toString())).replaceAll("\\{" + "gameId" + "\\}", apiInvoker.escapeString(gameId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PublicGame) ApiInvoker.deserialize(localVarResponse,  "", PublicGame.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get ecosystem games
  * Returns an array of games the ecosystem has approved.
   * @param ecosystemId Any ecosystem id within the MetaFab platform.
   * @return List<PublicGame>
  */
  public List<PublicGame> getEcosystemGames (String ecosystemId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'ecosystemId' is set
    if (ecosystemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ecosystemId' when calling getEcosystemGames",
        new ApiException(400, "Missing the required parameter 'ecosystemId' when calling getEcosystemGames"));
    }

    // create path and map variables
    String path = "/v1/ecosystems/{ecosystemId}/games".replaceAll("\\{" + "ecosystemId" + "\\}", apiInvoker.escapeString(ecosystemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<PublicGame>) ApiInvoker.deserialize(localVarResponse, "array", PublicGame.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get ecosystem games
   * Returns an array of games the ecosystem has approved.
   * @param ecosystemId Any ecosystem id within the MetaFab platform.
  */
  public void getEcosystemGames (String ecosystemId, final Response.Listener<List<PublicGame>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'ecosystemId' is set
    if (ecosystemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ecosystemId' when calling getEcosystemGames",
        new ApiException(400, "Missing the required parameter 'ecosystemId' when calling getEcosystemGames"));
    }

    // create path and map variables
    String path = "/v1/ecosystems/{ecosystemId}/games".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ecosystemId" + "\\}", apiInvoker.escapeString(ecosystemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<PublicGame>) ApiInvoker.deserialize(localVarResponse,  "array", PublicGame.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get profile game
  * Returns a game this profile has connected player accounts for.
   * @param profileId The profile id of the authenticating profile.
   * @param gameId Any game id within the MetaFab platform.
   * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile.
   * @return GetProfileGames200ResponseInner
  */
  public GetProfileGames200ResponseInner getProfileGame (String profileId, String gameId, String xAuthorization) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'profileId' is set
    if (profileId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'profileId' when calling getProfileGame",
        new ApiException(400, "Missing the required parameter 'profileId' when calling getProfileGame"));
    }
    // verify the required parameter 'gameId' is set
    if (gameId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'gameId' when calling getProfileGame",
        new ApiException(400, "Missing the required parameter 'gameId' when calling getProfileGame"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling getProfileGame",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling getProfileGame"));
    }

    // create path and map variables
    String path = "/v1/profiles/{profileId}/games/{gameId}".replaceAll("\\{" + "profileId" + "\\}", apiInvoker.escapeString(profileId.toString())).replaceAll("\\{" + "gameId" + "\\}", apiInvoker.escapeString(gameId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetProfileGames200ResponseInner) ApiInvoker.deserialize(localVarResponse, "", GetProfileGames200ResponseInner.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get profile game
   * Returns a game this profile has connected player accounts for.
   * @param profileId The profile id of the authenticating profile.   * @param gameId Any game id within the MetaFab platform.   * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile.
  */
  public void getProfileGame (String profileId, String gameId, String xAuthorization, final Response.Listener<GetProfileGames200ResponseInner> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'profileId' is set
    if (profileId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'profileId' when calling getProfileGame",
        new ApiException(400, "Missing the required parameter 'profileId' when calling getProfileGame"));
    }
    // verify the required parameter 'gameId' is set
    if (gameId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'gameId' when calling getProfileGame",
        new ApiException(400, "Missing the required parameter 'gameId' when calling getProfileGame"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling getProfileGame",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling getProfileGame"));
    }

    // create path and map variables
    String path = "/v1/profiles/{profileId}/games/{gameId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "profileId" + "\\}", apiInvoker.escapeString(profileId.toString())).replaceAll("\\{" + "gameId" + "\\}", apiInvoker.escapeString(gameId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetProfileGames200ResponseInner) ApiInvoker.deserialize(localVarResponse,  "", GetProfileGames200ResponseInner.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get profile games
  * Returns an array of games the authorized profile has connected player accounts for.
   * @param profileId The profile id of the authenticating profile.
   * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile.
   * @return List<GetProfileGames200ResponseInner>
  */
  public List<GetProfileGames200ResponseInner> getProfileGames (String profileId, String xAuthorization) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'profileId' is set
    if (profileId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'profileId' when calling getProfileGames",
        new ApiException(400, "Missing the required parameter 'profileId' when calling getProfileGames"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling getProfileGames",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling getProfileGames"));
    }

    // create path and map variables
    String path = "/v1/profiles/{profileId}/games".replaceAll("\\{" + "profileId" + "\\}", apiInvoker.escapeString(profileId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<GetProfileGames200ResponseInner>) ApiInvoker.deserialize(localVarResponse, "array", GetProfileGames200ResponseInner.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get profile games
   * Returns an array of games the authorized profile has connected player accounts for.
   * @param profileId The profile id of the authenticating profile.   * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile.
  */
  public void getProfileGames (String profileId, String xAuthorization, final Response.Listener<List<GetProfileGames200ResponseInner>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'profileId' is set
    if (profileId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'profileId' when calling getProfileGames",
        new ApiException(400, "Missing the required parameter 'profileId' when calling getProfileGames"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling getProfileGames",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling getProfileGames"));
    }

    // create path and map variables
    String path = "/v1/profiles/{profileId}/games".replaceAll("\\{format\\}","json").replaceAll("\\{" + "profileId" + "\\}", apiInvoker.escapeString(profileId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<GetProfileGames200ResponseInner>) ApiInvoker.deserialize(localVarResponse,  "array", GetProfileGames200ResponseInner.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Unapprove ecosystem game
  * Unapproves a game for an ecosystem. The game will no longer be able to allow profiles from the ecosystem to login. All profile permissions approved for the game will also be revoked.
   * @param ecosystemId The ecosystem id of the authenticating ecosystem.
   * @param gameId Any game id within the MetaFab platform.
   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating ecosystem.
   * @return void
  */
  public void unapproveEcosystemGame (String ecosystemId, String gameId, String xAuthorization) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'ecosystemId' is set
    if (ecosystemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ecosystemId' when calling unapproveEcosystemGame",
        new ApiException(400, "Missing the required parameter 'ecosystemId' when calling unapproveEcosystemGame"));
    }
    // verify the required parameter 'gameId' is set
    if (gameId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'gameId' when calling unapproveEcosystemGame",
        new ApiException(400, "Missing the required parameter 'gameId' when calling unapproveEcosystemGame"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling unapproveEcosystemGame",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling unapproveEcosystemGame"));
    }

    // create path and map variables
    String path = "/v1/ecosystems/{ecosystemId}/games/{gameId}".replaceAll("\\{" + "ecosystemId" + "\\}", apiInvoker.escapeString(ecosystemId.toString())).replaceAll("\\{" + "gameId" + "\\}", apiInvoker.escapeString(gameId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Unapprove ecosystem game
   * Unapproves a game for an ecosystem. The game will no longer be able to allow profiles from the ecosystem to login. All profile permissions approved for the game will also be revoked.
   * @param ecosystemId The ecosystem id of the authenticating ecosystem.   * @param gameId Any game id within the MetaFab platform.   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating ecosystem.
  */
  public void unapproveEcosystemGame (String ecosystemId, String gameId, String xAuthorization, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'ecosystemId' is set
    if (ecosystemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ecosystemId' when calling unapproveEcosystemGame",
        new ApiException(400, "Missing the required parameter 'ecosystemId' when calling unapproveEcosystemGame"));
    }
    // verify the required parameter 'gameId' is set
    if (gameId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'gameId' when calling unapproveEcosystemGame",
        new ApiException(400, "Missing the required parameter 'gameId' when calling unapproveEcosystemGame"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling unapproveEcosystemGame",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling unapproveEcosystemGame"));
    }

    // create path and map variables
    String path = "/v1/ecosystems/{ecosystemId}/games/{gameId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ecosystemId" + "\\}", apiInvoker.escapeString(ecosystemId.toString())).replaceAll("\\{" + "gameId" + "\\}", apiInvoker.escapeString(gameId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update ecosystem
  * Update various fields specific to an ecosystem. Such as changing its password, resetting its published or secret key, or updating its approved games.
   * @param ecosystemId The ecosystem id of the authenticating ecosystem.
   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating ecosystem.
   * @param updateEcosystemRequest 
   * @return EcosystemModel
  */
  public EcosystemModel updateEcosystem (String ecosystemId, String xAuthorization, UpdateEcosystemRequest updateEcosystemRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = updateEcosystemRequest;
    // verify the required parameter 'ecosystemId' is set
    if (ecosystemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ecosystemId' when calling updateEcosystem",
        new ApiException(400, "Missing the required parameter 'ecosystemId' when calling updateEcosystem"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling updateEcosystem",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling updateEcosystem"));
    }
    // verify the required parameter 'updateEcosystemRequest' is set
    if (updateEcosystemRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'updateEcosystemRequest' when calling updateEcosystem",
        new ApiException(400, "Missing the required parameter 'updateEcosystemRequest' when calling updateEcosystem"));
    }

    // create path and map variables
    String path = "/v1/ecosystems/{ecosystemId}".replaceAll("\\{" + "ecosystemId" + "\\}", apiInvoker.escapeString(ecosystemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EcosystemModel) ApiInvoker.deserialize(localVarResponse, "", EcosystemModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update ecosystem
   * Update various fields specific to an ecosystem. Such as changing its password, resetting its published or secret key, or updating its approved games.
   * @param ecosystemId The ecosystem id of the authenticating ecosystem.   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating ecosystem.   * @param updateEcosystemRequest 
  */
  public void updateEcosystem (String ecosystemId, String xAuthorization, UpdateEcosystemRequest updateEcosystemRequest, final Response.Listener<EcosystemModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = updateEcosystemRequest;

    // verify the required parameter 'ecosystemId' is set
    if (ecosystemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ecosystemId' when calling updateEcosystem",
        new ApiException(400, "Missing the required parameter 'ecosystemId' when calling updateEcosystem"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling updateEcosystem",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling updateEcosystem"));
    }
    // verify the required parameter 'updateEcosystemRequest' is set
    if (updateEcosystemRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'updateEcosystemRequest' when calling updateEcosystem",
        new ApiException(400, "Missing the required parameter 'updateEcosystemRequest' when calling updateEcosystem"));
    }

    // create path and map variables
    String path = "/v1/ecosystems/{ecosystemId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ecosystemId" + "\\}", apiInvoker.escapeString(ecosystemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EcosystemModel) ApiInvoker.deserialize(localVarResponse,  "", EcosystemModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update profile
  * Update various fields specific to a profile. Such as changing its password and resetting its access token.
   * @param profileId The profile id of the authenticating profile.
   * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile.
   * @param updateProfileRequest 
   * @return ProfileModel
  */
  public ProfileModel updateProfile (String profileId, String xAuthorization, UpdateProfileRequest updateProfileRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = updateProfileRequest;
    // verify the required parameter 'profileId' is set
    if (profileId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'profileId' when calling updateProfile",
        new ApiException(400, "Missing the required parameter 'profileId' when calling updateProfile"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling updateProfile",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling updateProfile"));
    }
    // verify the required parameter 'updateProfileRequest' is set
    if (updateProfileRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'updateProfileRequest' when calling updateProfile",
        new ApiException(400, "Missing the required parameter 'updateProfileRequest' when calling updateProfile"));
    }

    // create path and map variables
    String path = "/v1/profiles/{profileId}".replaceAll("\\{" + "profileId" + "\\}", apiInvoker.escapeString(profileId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProfileModel) ApiInvoker.deserialize(localVarResponse, "", ProfileModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update profile
   * Update various fields specific to a profile. Such as changing its password and resetting its access token.
   * @param profileId The profile id of the authenticating profile.   * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile.   * @param updateProfileRequest 
  */
  public void updateProfile (String profileId, String xAuthorization, UpdateProfileRequest updateProfileRequest, final Response.Listener<ProfileModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = updateProfileRequest;

    // verify the required parameter 'profileId' is set
    if (profileId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'profileId' when calling updateProfile",
        new ApiException(400, "Missing the required parameter 'profileId' when calling updateProfile"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling updateProfile",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling updateProfile"));
    }
    // verify the required parameter 'updateProfileRequest' is set
    if (updateProfileRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'updateProfileRequest' when calling updateProfile",
        new ApiException(400, "Missing the required parameter 'updateProfileRequest' when calling updateProfile"));
    }

    // create path and map variables
    String path = "/v1/profiles/{profileId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "profileId" + "\\}", apiInvoker.escapeString(profileId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProfileModel) ApiInvoker.deserialize(localVarResponse,  "", ProfileModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update profile player
  * Update various fields specific to a player. Such as changing its permissions.
   * @param profileId The profile id of the authenticating profile.
   * @param gameId Any game id within the MetaFab platform.
   * @param playerId Any player id within the MetaFab platform.
   * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile.
   * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.
   * @param updateProfilePlayerRequest 
   * @return UpdateProfilePlayer200Response
  */
  public UpdateProfilePlayer200Response updateProfilePlayer (String profileId, String gameId, String playerId, String xAuthorization, String xWalletDecryptKey, UpdateProfilePlayerRequest updateProfilePlayerRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = updateProfilePlayerRequest;
    // verify the required parameter 'profileId' is set
    if (profileId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'profileId' when calling updateProfilePlayer",
        new ApiException(400, "Missing the required parameter 'profileId' when calling updateProfilePlayer"));
    }
    // verify the required parameter 'gameId' is set
    if (gameId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'gameId' when calling updateProfilePlayer",
        new ApiException(400, "Missing the required parameter 'gameId' when calling updateProfilePlayer"));
    }
    // verify the required parameter 'playerId' is set
    if (playerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'playerId' when calling updateProfilePlayer",
        new ApiException(400, "Missing the required parameter 'playerId' when calling updateProfilePlayer"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling updateProfilePlayer",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling updateProfilePlayer"));
    }
    // verify the required parameter 'xWalletDecryptKey' is set
    if (xWalletDecryptKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xWalletDecryptKey' when calling updateProfilePlayer",
        new ApiException(400, "Missing the required parameter 'xWalletDecryptKey' when calling updateProfilePlayer"));
    }
    // verify the required parameter 'updateProfilePlayerRequest' is set
    if (updateProfilePlayerRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'updateProfilePlayerRequest' when calling updateProfilePlayer",
        new ApiException(400, "Missing the required parameter 'updateProfilePlayerRequest' when calling updateProfilePlayer"));
    }

    // create path and map variables
    String path = "/v1/profiles/{profileId}/games/{gameId}/players/{playerId}".replaceAll("\\{" + "profileId" + "\\}", apiInvoker.escapeString(profileId.toString())).replaceAll("\\{" + "gameId" + "\\}", apiInvoker.escapeString(gameId.toString())).replaceAll("\\{" + "playerId" + "\\}", apiInvoker.escapeString(playerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Wallet-Decrypt-Key", ApiInvoker.parameterToString(xWalletDecryptKey));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UpdateProfilePlayer200Response) ApiInvoker.deserialize(localVarResponse, "", UpdateProfilePlayer200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update profile player
   * Update various fields specific to a player. Such as changing its permissions.
   * @param profileId The profile id of the authenticating profile.   * @param gameId Any game id within the MetaFab platform.   * @param playerId Any player id within the MetaFab platform.   * @param xAuthorization The &#x60;accessToken&#x60; of the authenticating profile.   * @param xWalletDecryptKey The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.   * @param updateProfilePlayerRequest 
  */
  public void updateProfilePlayer (String profileId, String gameId, String playerId, String xAuthorization, String xWalletDecryptKey, UpdateProfilePlayerRequest updateProfilePlayerRequest, final Response.Listener<UpdateProfilePlayer200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = updateProfilePlayerRequest;

    // verify the required parameter 'profileId' is set
    if (profileId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'profileId' when calling updateProfilePlayer",
        new ApiException(400, "Missing the required parameter 'profileId' when calling updateProfilePlayer"));
    }
    // verify the required parameter 'gameId' is set
    if (gameId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'gameId' when calling updateProfilePlayer",
        new ApiException(400, "Missing the required parameter 'gameId' when calling updateProfilePlayer"));
    }
    // verify the required parameter 'playerId' is set
    if (playerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'playerId' when calling updateProfilePlayer",
        new ApiException(400, "Missing the required parameter 'playerId' when calling updateProfilePlayer"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling updateProfilePlayer",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling updateProfilePlayer"));
    }
    // verify the required parameter 'xWalletDecryptKey' is set
    if (xWalletDecryptKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xWalletDecryptKey' when calling updateProfilePlayer",
        new ApiException(400, "Missing the required parameter 'xWalletDecryptKey' when calling updateProfilePlayer"));
    }
    // verify the required parameter 'updateProfilePlayerRequest' is set
    if (updateProfilePlayerRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'updateProfilePlayerRequest' when calling updateProfilePlayer",
        new ApiException(400, "Missing the required parameter 'updateProfilePlayerRequest' when calling updateProfilePlayer"));
    }

    // create path and map variables
    String path = "/v1/profiles/{profileId}/games/{gameId}/players/{playerId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "profileId" + "\\}", apiInvoker.escapeString(profileId.toString())).replaceAll("\\{" + "gameId" + "\\}", apiInvoker.escapeString(gameId.toString())).replaceAll("\\{" + "playerId" + "\\}", apiInvoker.escapeString(playerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Wallet-Decrypt-Key", ApiInvoker.parameterToString(xWalletDecryptKey));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UpdateProfilePlayer200Response) ApiInvoker.deserialize(localVarResponse,  "", UpdateProfilePlayer200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
