/**
 * MetaFab API
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.4.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.metafab.client.api;

import org.metafab.client.ApiInvoker;
import org.metafab.client.ApiException;
import org.metafab.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.CreateShop200Response;
import org.openapitools.client.model.CreateShopRequest;
import org.openapitools.client.model.GetShops200ResponseInner;
import org.openapitools.client.model.SetShopOfferRequest;
import org.openapitools.client.model.ShopOffer;
import org.openapitools.client.model.TransactionModel;
import org.openapitools.client.model.WithdrawFromShopRequest;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ShopsApi {
  String basePath = "https://api.trymetafab.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Create shop
  * Creates a new game shop and deploys a shop contract on behalf of the authenticating game&#39;s primary wallet. The deployed shop contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, a shop allows you to create shop offers for some set of item(s) to another set of item(s) or any mix of currency. Shops completely support gasless player transactions.
   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.
   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
   * @param createShopRequest 
   * @return CreateShop200Response
  */
  public CreateShop200Response createShop (String xAuthorization, String xPassword, CreateShopRequest createShopRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = createShopRequest;
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling createShop",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling createShop"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling createShop",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling createShop"));
    }
    // verify the required parameter 'createShopRequest' is set
    if (createShopRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createShopRequest' when calling createShop",
        new ApiException(400, "Missing the required parameter 'createShopRequest' when calling createShop"));
    }

    // create path and map variables
    String path = "/v1/shops";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CreateShop200Response) ApiInvoker.deserialize(localVarResponse, "", CreateShop200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create shop
   * Creates a new game shop and deploys a shop contract on behalf of the authenticating game&#39;s primary wallet. The deployed shop contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, a shop allows you to create shop offers for some set of item(s) to another set of item(s) or any mix of currency. Shops completely support gasless player transactions.
   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.   * @param createShopRequest 
  */
  public void createShop (String xAuthorization, String xPassword, CreateShopRequest createShopRequest, final Response.Listener<CreateShop200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = createShopRequest;

    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling createShop",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling createShop"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling createShop",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling createShop"));
    }
    // verify the required parameter 'createShopRequest' is set
    if (createShopRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createShopRequest' when calling createShop",
        new ApiException(400, "Missing the required parameter 'createShopRequest' when calling createShop"));
    }

    // create path and map variables
    String path = "/v1/shops".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CreateShop200Response) ApiInvoker.deserialize(localVarResponse,  "", CreateShop200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get shop offer
  * Returns a shop offer object for the provided shopOfferId.
   * @param shopId Any shop id within the MetaFab ecosystem.
   * @param shopOfferId Any offer id for the shop. Zero, or a positive integer.
   * @return ShopOffer
  */
  public ShopOffer getShopOffer (String shopId, String shopOfferId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'shopId' is set
    if (shopId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shopId' when calling getShopOffer",
        new ApiException(400, "Missing the required parameter 'shopId' when calling getShopOffer"));
    }
    // verify the required parameter 'shopOfferId' is set
    if (shopOfferId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shopOfferId' when calling getShopOffer",
        new ApiException(400, "Missing the required parameter 'shopOfferId' when calling getShopOffer"));
    }

    // create path and map variables
    String path = "/v1/shops/{shopId}/items/{shopOfferId}".replaceAll("\\{" + "shopId" + "\\}", apiInvoker.escapeString(shopId.toString())).replaceAll("\\{" + "shopOfferId" + "\\}", apiInvoker.escapeString(shopOfferId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ShopOffer) ApiInvoker.deserialize(localVarResponse, "", ShopOffer.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get shop offer
   * Returns a shop offer object for the provided shopOfferId.
   * @param shopId Any shop id within the MetaFab ecosystem.   * @param shopOfferId Any offer id for the shop. Zero, or a positive integer.
  */
  public void getShopOffer (String shopId, String shopOfferId, final Response.Listener<ShopOffer> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'shopId' is set
    if (shopId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shopId' when calling getShopOffer",
        new ApiException(400, "Missing the required parameter 'shopId' when calling getShopOffer"));
    }
    // verify the required parameter 'shopOfferId' is set
    if (shopOfferId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shopOfferId' when calling getShopOffer",
        new ApiException(400, "Missing the required parameter 'shopOfferId' when calling getShopOffer"));
    }

    // create path and map variables
    String path = "/v1/shops/{shopId}/items/{shopOfferId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "shopId" + "\\}", apiInvoker.escapeString(shopId.toString())).replaceAll("\\{" + "shopOfferId" + "\\}", apiInvoker.escapeString(shopOfferId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ShopOffer) ApiInvoker.deserialize(localVarResponse,  "", ShopOffer.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get shop offers
  * Returns all shop offers as an array of shop offer objects.
   * @param shopId Any shop id within the MetaFab ecosystem.
   * @return List<ShopOffer>
  */
  public List<ShopOffer> getShopOffers (String shopId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'shopId' is set
    if (shopId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shopId' when calling getShopOffers",
        new ApiException(400, "Missing the required parameter 'shopId' when calling getShopOffers"));
    }

    // create path and map variables
    String path = "/v1/shops/{shopId}/offers".replaceAll("\\{" + "shopId" + "\\}", apiInvoker.escapeString(shopId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<ShopOffer>) ApiInvoker.deserialize(localVarResponse, "array", ShopOffer.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get shop offers
   * Returns all shop offers as an array of shop offer objects.
   * @param shopId Any shop id within the MetaFab ecosystem.
  */
  public void getShopOffers (String shopId, final Response.Listener<List<ShopOffer>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'shopId' is set
    if (shopId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shopId' when calling getShopOffers",
        new ApiException(400, "Missing the required parameter 'shopId' when calling getShopOffers"));
    }

    // create path and map variables
    String path = "/v1/shops/{shopId}/offers".replaceAll("\\{format\\}","json").replaceAll("\\{" + "shopId" + "\\}", apiInvoker.escapeString(shopId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<ShopOffer>) ApiInvoker.deserialize(localVarResponse,  "array", ShopOffer.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get shops
  * Returns an array of active shops for the game associated with the provided &#x60;X-Game-Key&#x60;.
   * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.
   * @return List<GetShops200ResponseInner>
  */
  public List<GetShops200ResponseInner> getShops (String xGameKey) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'xGameKey' is set
    if (xGameKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGameKey' when calling getShops",
        new ApiException(400, "Missing the required parameter 'xGameKey' when calling getShops"));
    }

    // create path and map variables
    String path = "/v1/shops";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Game-Key", ApiInvoker.parameterToString(xGameKey));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<GetShops200ResponseInner>) ApiInvoker.deserialize(localVarResponse, "array", GetShops200ResponseInner.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get shops
   * Returns an array of active shops for the game associated with the provided &#x60;X-Game-Key&#x60;.
   * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.
  */
  public void getShops (String xGameKey, final Response.Listener<List<GetShops200ResponseInner>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'xGameKey' is set
    if (xGameKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGameKey' when calling getShops",
        new ApiException(400, "Missing the required parameter 'xGameKey' when calling getShops"));
    }

    // create path and map variables
    String path = "/v1/shops".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Game-Key", ApiInvoker.parameterToString(xGameKey));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<GetShops200ResponseInner>) ApiInvoker.deserialize(localVarResponse,  "array", GetShops200ResponseInner.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Remove shop offer
  * Removes the provided offer by offerId from the provided shop. Removed offers can no longer be used.
   * @param shopId Any shop id within the MetaFab ecosystem.
   * @param shopOfferId Any offer id for the shop. Zero, or a positive integer.
   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.
   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
   * @return TransactionModel
  */
  public TransactionModel removeShopOffer (String shopId, String shopOfferId, String xAuthorization, String xPassword) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'shopId' is set
    if (shopId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shopId' when calling removeShopOffer",
        new ApiException(400, "Missing the required parameter 'shopId' when calling removeShopOffer"));
    }
    // verify the required parameter 'shopOfferId' is set
    if (shopOfferId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shopOfferId' when calling removeShopOffer",
        new ApiException(400, "Missing the required parameter 'shopOfferId' when calling removeShopOffer"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling removeShopOffer",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling removeShopOffer"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling removeShopOffer",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling removeShopOffer"));
    }

    // create path and map variables
    String path = "/v1/shops/{shopId}/offers/{shopOfferId}".replaceAll("\\{" + "shopId" + "\\}", apiInvoker.escapeString(shopId.toString())).replaceAll("\\{" + "shopOfferId" + "\\}", apiInvoker.escapeString(shopOfferId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TransactionModel) ApiInvoker.deserialize(localVarResponse, "", TransactionModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Remove shop offer
   * Removes the provided offer by offerId from the provided shop. Removed offers can no longer be used.
   * @param shopId Any shop id within the MetaFab ecosystem.   * @param shopOfferId Any offer id for the shop. Zero, or a positive integer.   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
  */
  public void removeShopOffer (String shopId, String shopOfferId, String xAuthorization, String xPassword, final Response.Listener<TransactionModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'shopId' is set
    if (shopId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shopId' when calling removeShopOffer",
        new ApiException(400, "Missing the required parameter 'shopId' when calling removeShopOffer"));
    }
    // verify the required parameter 'shopOfferId' is set
    if (shopOfferId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shopOfferId' when calling removeShopOffer",
        new ApiException(400, "Missing the required parameter 'shopOfferId' when calling removeShopOffer"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling removeShopOffer",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling removeShopOffer"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling removeShopOffer",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling removeShopOffer"));
    }

    // create path and map variables
    String path = "/v1/shops/{shopId}/offers/{shopOfferId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "shopId" + "\\}", apiInvoker.escapeString(shopId.toString())).replaceAll("\\{" + "shopOfferId" + "\\}", apiInvoker.escapeString(shopOfferId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TransactionModel) ApiInvoker.deserialize(localVarResponse,  "", TransactionModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Set shop offer
  * Sets a new shop offer or updates an existing one for the provided id. Shop offers allow currency to item, item to currency or item to item exchanges.  All request fields besides &#x60;id&#x60; are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make a shop offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
   * @param shopId Any shop id within the MetaFab ecosystem.
   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.
   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
   * @param setShopOfferRequest 
   * @return TransactionModel
  */
  public TransactionModel setShopOffer (String shopId, String xAuthorization, String xPassword, SetShopOfferRequest setShopOfferRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = setShopOfferRequest;
    // verify the required parameter 'shopId' is set
    if (shopId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shopId' when calling setShopOffer",
        new ApiException(400, "Missing the required parameter 'shopId' when calling setShopOffer"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling setShopOffer",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling setShopOffer"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling setShopOffer",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling setShopOffer"));
    }
    // verify the required parameter 'setShopOfferRequest' is set
    if (setShopOfferRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'setShopOfferRequest' when calling setShopOffer",
        new ApiException(400, "Missing the required parameter 'setShopOfferRequest' when calling setShopOffer"));
    }

    // create path and map variables
    String path = "/v1/shops/{shopId}/offers".replaceAll("\\{" + "shopId" + "\\}", apiInvoker.escapeString(shopId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TransactionModel) ApiInvoker.deserialize(localVarResponse, "", TransactionModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Set shop offer
   * Sets a new shop offer or updates an existing one for the provided id. Shop offers allow currency to item, item to currency or item to item exchanges.  All request fields besides &#x60;id&#x60; are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make a shop offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
   * @param shopId Any shop id within the MetaFab ecosystem.   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.   * @param setShopOfferRequest 
  */
  public void setShopOffer (String shopId, String xAuthorization, String xPassword, SetShopOfferRequest setShopOfferRequest, final Response.Listener<TransactionModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = setShopOfferRequest;

    // verify the required parameter 'shopId' is set
    if (shopId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shopId' when calling setShopOffer",
        new ApiException(400, "Missing the required parameter 'shopId' when calling setShopOffer"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling setShopOffer",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling setShopOffer"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling setShopOffer",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling setShopOffer"));
    }
    // verify the required parameter 'setShopOfferRequest' is set
    if (setShopOfferRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'setShopOfferRequest' when calling setShopOffer",
        new ApiException(400, "Missing the required parameter 'setShopOfferRequest' when calling setShopOffer"));
    }

    // create path and map variables
    String path = "/v1/shops/{shopId}/offers".replaceAll("\\{format\\}","json").replaceAll("\\{" + "shopId" + "\\}", apiInvoker.escapeString(shopId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TransactionModel) ApiInvoker.deserialize(localVarResponse,  "", TransactionModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Use shop offer
  * Uses a shop offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
   * @param shopId Any shop id within the MetaFab ecosystem.
   * @param shopOfferId Any offer id for the shop. Zero, or a positive integer.
   * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.
   * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
   * @return TransactionModel
  */
  public TransactionModel useShopOffer (String shopId, String shopOfferId, String xAuthorization, String xPassword) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'shopId' is set
    if (shopId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shopId' when calling useShopOffer",
        new ApiException(400, "Missing the required parameter 'shopId' when calling useShopOffer"));
    }
    // verify the required parameter 'shopOfferId' is set
    if (shopOfferId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shopOfferId' when calling useShopOffer",
        new ApiException(400, "Missing the required parameter 'shopOfferId' when calling useShopOffer"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling useShopOffer",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling useShopOffer"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling useShopOffer",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling useShopOffer"));
    }

    // create path and map variables
    String path = "/v1/shops/{shopId}/offers/{shopOfferId}/uses".replaceAll("\\{" + "shopId" + "\\}", apiInvoker.escapeString(shopId.toString())).replaceAll("\\{" + "shopOfferId" + "\\}", apiInvoker.escapeString(shopOfferId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TransactionModel) ApiInvoker.deserialize(localVarResponse, "", TransactionModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Use shop offer
   * Uses a shop offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
   * @param shopId Any shop id within the MetaFab ecosystem.   * @param shopOfferId Any offer id for the shop. Zero, or a positive integer.   * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.   * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
  */
  public void useShopOffer (String shopId, String shopOfferId, String xAuthorization, String xPassword, final Response.Listener<TransactionModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'shopId' is set
    if (shopId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shopId' when calling useShopOffer",
        new ApiException(400, "Missing the required parameter 'shopId' when calling useShopOffer"));
    }
    // verify the required parameter 'shopOfferId' is set
    if (shopOfferId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shopOfferId' when calling useShopOffer",
        new ApiException(400, "Missing the required parameter 'shopOfferId' when calling useShopOffer"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling useShopOffer",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling useShopOffer"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling useShopOffer",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling useShopOffer"));
    }

    // create path and map variables
    String path = "/v1/shops/{shopId}/offers/{shopOfferId}/uses".replaceAll("\\{format\\}","json").replaceAll("\\{" + "shopId" + "\\}", apiInvoker.escapeString(shopId.toString())).replaceAll("\\{" + "shopOfferId" + "\\}", apiInvoker.escapeString(shopOfferId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TransactionModel) ApiInvoker.deserialize(localVarResponse,  "", TransactionModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Withdraw from shop
  * Withdraws native token, currency or items from a shop. Whenever a shop offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the shop contract when the offer is used. These can be withdrawn to any other address.
   * @param shopId Any shop id within the MetaFab ecosystem.
   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.
   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
   * @param withdrawFromShopRequest 
   * @return TransactionModel
  */
  public TransactionModel withdrawFromShop (String shopId, String xAuthorization, String xPassword, WithdrawFromShopRequest withdrawFromShopRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = withdrawFromShopRequest;
    // verify the required parameter 'shopId' is set
    if (shopId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shopId' when calling withdrawFromShop",
        new ApiException(400, "Missing the required parameter 'shopId' when calling withdrawFromShop"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling withdrawFromShop",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling withdrawFromShop"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling withdrawFromShop",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling withdrawFromShop"));
    }
    // verify the required parameter 'withdrawFromShopRequest' is set
    if (withdrawFromShopRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'withdrawFromShopRequest' when calling withdrawFromShop",
        new ApiException(400, "Missing the required parameter 'withdrawFromShopRequest' when calling withdrawFromShop"));
    }

    // create path and map variables
    String path = "/v1/shops/{shopId}/withdrawals".replaceAll("\\{" + "shopId" + "\\}", apiInvoker.escapeString(shopId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TransactionModel) ApiInvoker.deserialize(localVarResponse, "", TransactionModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Withdraw from shop
   * Withdraws native token, currency or items from a shop. Whenever a shop offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the shop contract when the offer is used. These can be withdrawn to any other address.
   * @param shopId Any shop id within the MetaFab ecosystem.   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.   * @param withdrawFromShopRequest 
  */
  public void withdrawFromShop (String shopId, String xAuthorization, String xPassword, WithdrawFromShopRequest withdrawFromShopRequest, final Response.Listener<TransactionModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = withdrawFromShopRequest;

    // verify the required parameter 'shopId' is set
    if (shopId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shopId' when calling withdrawFromShop",
        new ApiException(400, "Missing the required parameter 'shopId' when calling withdrawFromShop"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling withdrawFromShop",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling withdrawFromShop"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling withdrawFromShop",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling withdrawFromShop"));
    }
    // verify the required parameter 'withdrawFromShopRequest' is set
    if (withdrawFromShopRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'withdrawFromShopRequest' when calling withdrawFromShop",
        new ApiException(400, "Missing the required parameter 'withdrawFromShopRequest' when calling withdrawFromShop"));
    }

    // create path and map variables
    String path = "/v1/shops/{shopId}/withdrawals".replaceAll("\\{format\\}","json").replaceAll("\\{" + "shopId" + "\\}", apiInvoker.escapeString(shopId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TransactionModel) ApiInvoker.deserialize(localVarResponse,  "", TransactionModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
