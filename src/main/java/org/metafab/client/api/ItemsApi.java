/**
 * MetaFab API
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.1.43
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.metafab.client.api;

import org.metafab.client.ApiInvoker;
import org.metafab.client.ApiException;
import org.metafab.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.BatchMintCollectionItemsRequest;
import org.openapitools.client.model.BatchTransferCollectionItemsRequest;
import java.math.BigDecimal;
import org.openapitools.client.model.BurnCollectionItemRequest;
import org.openapitools.client.model.CreateCollection200Response;
import org.openapitools.client.model.CreateCollectionItemRequest;
import org.openapitools.client.model.CreateCollectionRequest;
import org.openapitools.client.model.GetCollections200ResponseInner;
import org.openapitools.client.model.GrantCollectionRoleRequest;
import org.openapitools.client.model.MintCollectionItemRequest;
import org.openapitools.client.model.RevokeCollectionRoleRequest;
import org.openapitools.client.model.SetCollectionApprovalRequest;
import org.openapitools.client.model.SetCollectionItemTimelockRequest;
import org.openapitools.client.model.TransactionModel;
import org.openapitools.client.model.TransferCollectionItemRequest;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ItemsApi {
  String basePath = "https://api.trymetafab.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Batch mint collection items
  * Creates (mints) the provided itemIds of the specified quantities to the provided wallet address or wallet address associated with the provided walletId.
   * @param collectionId Any collection id within the MetaFab ecosystem.
   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.
   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
   * @param batchMintCollectionItemsRequest 
   * @return TransactionModel
  */
  public TransactionModel batchMintCollectionItems (String collectionId, String xAuthorization, String xPassword, BatchMintCollectionItemsRequest batchMintCollectionItemsRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = batchMintCollectionItemsRequest;
    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling batchMintCollectionItems",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling batchMintCollectionItems"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling batchMintCollectionItems",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling batchMintCollectionItems"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling batchMintCollectionItems",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling batchMintCollectionItems"));
    }
    // verify the required parameter 'batchMintCollectionItemsRequest' is set
    if (batchMintCollectionItemsRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'batchMintCollectionItemsRequest' when calling batchMintCollectionItems",
        new ApiException(400, "Missing the required parameter 'batchMintCollectionItemsRequest' when calling batchMintCollectionItems"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/batchMints".replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TransactionModel) ApiInvoker.deserialize(localVarResponse, "", TransactionModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Batch mint collection items
   * Creates (mints) the provided itemIds of the specified quantities to the provided wallet address or wallet address associated with the provided walletId.
   * @param collectionId Any collection id within the MetaFab ecosystem.   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.   * @param batchMintCollectionItemsRequest 
  */
  public void batchMintCollectionItems (String collectionId, String xAuthorization, String xPassword, BatchMintCollectionItemsRequest batchMintCollectionItemsRequest, final Response.Listener<TransactionModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = batchMintCollectionItemsRequest;

    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling batchMintCollectionItems",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling batchMintCollectionItems"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling batchMintCollectionItems",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling batchMintCollectionItems"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling batchMintCollectionItems",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling batchMintCollectionItems"));
    }
    // verify the required parameter 'batchMintCollectionItemsRequest' is set
    if (batchMintCollectionItemsRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'batchMintCollectionItemsRequest' when calling batchMintCollectionItems",
        new ApiException(400, "Missing the required parameter 'batchMintCollectionItemsRequest' when calling batchMintCollectionItems"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/batchMints".replaceAll("\\{format\\}","json").replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TransactionModel) ApiInvoker.deserialize(localVarResponse,  "", TransactionModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Batch transfer collection items
  * Transfers one or multiple items of specified quantities to the provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request.
   * @param collectionId Any collection id within the MetaFab ecosystem.
   * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.
   * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
   * @param batchTransferCollectionItemsRequest 
   * @return TransactionModel
  */
  public TransactionModel batchTransferCollectionItems (String collectionId, String xAuthorization, String xPassword, BatchTransferCollectionItemsRequest batchTransferCollectionItemsRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = batchTransferCollectionItemsRequest;
    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling batchTransferCollectionItems",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling batchTransferCollectionItems"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling batchTransferCollectionItems",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling batchTransferCollectionItems"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling batchTransferCollectionItems",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling batchTransferCollectionItems"));
    }
    // verify the required parameter 'batchTransferCollectionItemsRequest' is set
    if (batchTransferCollectionItemsRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'batchTransferCollectionItemsRequest' when calling batchTransferCollectionItems",
        new ApiException(400, "Missing the required parameter 'batchTransferCollectionItemsRequest' when calling batchTransferCollectionItems"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/batchTransfers".replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TransactionModel) ApiInvoker.deserialize(localVarResponse, "", TransactionModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Batch transfer collection items
   * Transfers one or multiple items of specified quantities to the provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request.
   * @param collectionId Any collection id within the MetaFab ecosystem.   * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.   * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.   * @param batchTransferCollectionItemsRequest 
  */
  public void batchTransferCollectionItems (String collectionId, String xAuthorization, String xPassword, BatchTransferCollectionItemsRequest batchTransferCollectionItemsRequest, final Response.Listener<TransactionModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = batchTransferCollectionItemsRequest;

    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling batchTransferCollectionItems",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling batchTransferCollectionItems"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling batchTransferCollectionItems",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling batchTransferCollectionItems"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling batchTransferCollectionItems",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling batchTransferCollectionItems"));
    }
    // verify the required parameter 'batchTransferCollectionItemsRequest' is set
    if (batchTransferCollectionItemsRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'batchTransferCollectionItemsRequest' when calling batchTransferCollectionItems",
        new ApiException(400, "Missing the required parameter 'batchTransferCollectionItemsRequest' when calling batchTransferCollectionItems"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/batchTransfers".replaceAll("\\{format\\}","json").replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TransactionModel) ApiInvoker.deserialize(localVarResponse,  "", TransactionModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Burn collection item
  * Removes (burns) the provided quantity of the collectionItemId from the authenticating game or players wallet. The quantity is permanently removed from the circulating supply of the item.
   * @param collectionId Any collection id within the MetaFab ecosystem.
   * @param collectionItemId Any item id for the collection. Zero, or a positive integer.
   * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.
   * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
   * @param burnCollectionItemRequest 
   * @return TransactionModel
  */
  public TransactionModel burnCollectionItem (String collectionId, BigDecimal collectionItemId, String xAuthorization, String xPassword, BurnCollectionItemRequest burnCollectionItemRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = burnCollectionItemRequest;
    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling burnCollectionItem",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling burnCollectionItem"));
    }
    // verify the required parameter 'collectionItemId' is set
    if (collectionItemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionItemId' when calling burnCollectionItem",
        new ApiException(400, "Missing the required parameter 'collectionItemId' when calling burnCollectionItem"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling burnCollectionItem",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling burnCollectionItem"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling burnCollectionItem",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling burnCollectionItem"));
    }
    // verify the required parameter 'burnCollectionItemRequest' is set
    if (burnCollectionItemRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'burnCollectionItemRequest' when calling burnCollectionItem",
        new ApiException(400, "Missing the required parameter 'burnCollectionItemRequest' when calling burnCollectionItem"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/items/{collectionItemId}/burns".replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString())).replaceAll("\\{" + "collectionItemId" + "\\}", apiInvoker.escapeString(collectionItemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TransactionModel) ApiInvoker.deserialize(localVarResponse, "", TransactionModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Burn collection item
   * Removes (burns) the provided quantity of the collectionItemId from the authenticating game or players wallet. The quantity is permanently removed from the circulating supply of the item.
   * @param collectionId Any collection id within the MetaFab ecosystem.   * @param collectionItemId Any item id for the collection. Zero, or a positive integer.   * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.   * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.   * @param burnCollectionItemRequest 
  */
  public void burnCollectionItem (String collectionId, BigDecimal collectionItemId, String xAuthorization, String xPassword, BurnCollectionItemRequest burnCollectionItemRequest, final Response.Listener<TransactionModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = burnCollectionItemRequest;

    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling burnCollectionItem",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling burnCollectionItem"));
    }
    // verify the required parameter 'collectionItemId' is set
    if (collectionItemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionItemId' when calling burnCollectionItem",
        new ApiException(400, "Missing the required parameter 'collectionItemId' when calling burnCollectionItem"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling burnCollectionItem",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling burnCollectionItem"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling burnCollectionItem",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling burnCollectionItem"));
    }
    // verify the required parameter 'burnCollectionItemRequest' is set
    if (burnCollectionItemRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'burnCollectionItemRequest' when calling burnCollectionItem",
        new ApiException(400, "Missing the required parameter 'burnCollectionItemRequest' when calling burnCollectionItem"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/items/{collectionItemId}/burns".replaceAll("\\{format\\}","json").replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString())).replaceAll("\\{" + "collectionItemId" + "\\}", apiInvoker.escapeString(collectionItemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TransactionModel) ApiInvoker.deserialize(localVarResponse,  "", TransactionModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create collection
  * Creates a new game item collection and deploys an extended functionality ERC1155 contract on behalf of the authenticating game&#39;s primary wallet. The deployed ERC1155 contract is preconfigured to fully support creating unique item types, item transfer timelocks, custom metadata per item, gasless transactions from player managed wallets, and much more.
   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.
   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
   * @param createCollectionRequest 
   * @return CreateCollection200Response
  */
  public CreateCollection200Response createCollection (String xAuthorization, String xPassword, CreateCollectionRequest createCollectionRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = createCollectionRequest;
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling createCollection",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling createCollection"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling createCollection",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling createCollection"));
    }
    // verify the required parameter 'createCollectionRequest' is set
    if (createCollectionRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createCollectionRequest' when calling createCollection",
        new ApiException(400, "Missing the required parameter 'createCollectionRequest' when calling createCollection"));
    }

    // create path and map variables
    String path = "/v1/collections";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CreateCollection200Response) ApiInvoker.deserialize(localVarResponse, "", CreateCollection200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create collection
   * Creates a new game item collection and deploys an extended functionality ERC1155 contract on behalf of the authenticating game&#39;s primary wallet. The deployed ERC1155 contract is preconfigured to fully support creating unique item types, item transfer timelocks, custom metadata per item, gasless transactions from player managed wallets, and much more.
   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.   * @param createCollectionRequest 
  */
  public void createCollection (String xAuthorization, String xPassword, CreateCollectionRequest createCollectionRequest, final Response.Listener<CreateCollection200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = createCollectionRequest;

    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling createCollection",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling createCollection"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling createCollection",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling createCollection"));
    }
    // verify the required parameter 'createCollectionRequest' is set
    if (createCollectionRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createCollectionRequest' when calling createCollection",
        new ApiException(400, "Missing the required parameter 'createCollectionRequest' when calling createCollection"));
    }

    // create path and map variables
    String path = "/v1/collections".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CreateCollection200Response) ApiInvoker.deserialize(localVarResponse,  "", CreateCollection200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create collection item
  * Creates a new item type. Item type creation associates all of the relevant item data to a specific itemId. Such as item name, image, description, attributes, any arbitrary data such as 2D or 3D model resolver URLs, and more. It is recommended, but not required, that you create a new item type through this endpoint before minting any quantity of the related itemId.  Any itemId provided will have its existing item type overriden if it already exists.  Item type data is uploaded to, and resolved through IPFS for decentralized persistence.
   * @param collectionId Any collection id within the MetaFab ecosystem.
   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.
   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
   * @param createCollectionItemRequest 
   * @return TransactionModel
  */
  public TransactionModel createCollectionItem (String collectionId, String xAuthorization, String xPassword, CreateCollectionItemRequest createCollectionItemRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = createCollectionItemRequest;
    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling createCollectionItem",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling createCollectionItem"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling createCollectionItem",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling createCollectionItem"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling createCollectionItem",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling createCollectionItem"));
    }
    // verify the required parameter 'createCollectionItemRequest' is set
    if (createCollectionItemRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createCollectionItemRequest' when calling createCollectionItem",
        new ApiException(400, "Missing the required parameter 'createCollectionItemRequest' when calling createCollectionItem"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/items".replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TransactionModel) ApiInvoker.deserialize(localVarResponse, "", TransactionModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create collection item
   * Creates a new item type. Item type creation associates all of the relevant item data to a specific itemId. Such as item name, image, description, attributes, any arbitrary data such as 2D or 3D model resolver URLs, and more. It is recommended, but not required, that you create a new item type through this endpoint before minting any quantity of the related itemId.  Any itemId provided will have its existing item type overriden if it already exists.  Item type data is uploaded to, and resolved through IPFS for decentralized persistence.
   * @param collectionId Any collection id within the MetaFab ecosystem.   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.   * @param createCollectionItemRequest 
  */
  public void createCollectionItem (String collectionId, String xAuthorization, String xPassword, CreateCollectionItemRequest createCollectionItemRequest, final Response.Listener<TransactionModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = createCollectionItemRequest;

    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling createCollectionItem",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling createCollectionItem"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling createCollectionItem",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling createCollectionItem"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling createCollectionItem",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling createCollectionItem"));
    }
    // verify the required parameter 'createCollectionItemRequest' is set
    if (createCollectionItemRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createCollectionItemRequest' when calling createCollectionItem",
        new ApiException(400, "Missing the required parameter 'createCollectionItemRequest' when calling createCollectionItem"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/items".replaceAll("\\{format\\}","json").replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TransactionModel) ApiInvoker.deserialize(localVarResponse,  "", TransactionModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get collection approval
  * Returns a boolean (true/false) representing if the provided operatorAddress has approval to transfer and burn items from the current collection owned by the address or address associated with the provided walletId.
   * @param collectionId Any collection id within the MetaFab ecosystem.
   * @param operatorAddress A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.
   * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.
   * @param walletId Any wallet id within the MetaFab ecosystem.
   * @return Boolean
  */
  public Boolean getCollectionApproval (String collectionId, String operatorAddress, String address, String walletId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling getCollectionApproval",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling getCollectionApproval"));
    }
    // verify the required parameter 'operatorAddress' is set
    if (operatorAddress == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'operatorAddress' when calling getCollectionApproval",
        new ApiException(400, "Missing the required parameter 'operatorAddress' when calling getCollectionApproval"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/approvals".replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "operatorAddress", operatorAddress));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "address", address));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "walletId", walletId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Boolean) ApiInvoker.deserialize(localVarResponse, "", Boolean.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get collection approval
   * Returns a boolean (true/false) representing if the provided operatorAddress has approval to transfer and burn items from the current collection owned by the address or address associated with the provided walletId.
   * @param collectionId Any collection id within the MetaFab ecosystem.   * @param operatorAddress A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.   * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.   * @param walletId Any wallet id within the MetaFab ecosystem.
  */
  public void getCollectionApproval (String collectionId, String operatorAddress, String address, String walletId, final Response.Listener<Boolean> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling getCollectionApproval",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling getCollectionApproval"));
    }
    // verify the required parameter 'operatorAddress' is set
    if (operatorAddress == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'operatorAddress' when calling getCollectionApproval",
        new ApiException(400, "Missing the required parameter 'operatorAddress' when calling getCollectionApproval"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/approvals".replaceAll("\\{format\\}","json").replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "operatorAddress", operatorAddress));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "address", address));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "walletId", walletId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Boolean) ApiInvoker.deserialize(localVarResponse,  "", Boolean.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get collection item
  * Returns a metadata object for the provided collectionItemId.
   * @param collectionId Any collection id within the MetaFab ecosystem.
   * @param collectionItemId Any item id for the collection. Zero, or a positive integer.
   * @return Object
  */
  public Object getCollectionItem (String collectionId, BigDecimal collectionItemId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling getCollectionItem",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling getCollectionItem"));
    }
    // verify the required parameter 'collectionItemId' is set
    if (collectionItemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionItemId' when calling getCollectionItem",
        new ApiException(400, "Missing the required parameter 'collectionItemId' when calling getCollectionItem"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/items/{collectionItemId}".replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString())).replaceAll("\\{" + "collectionItemId" + "\\}", apiInvoker.escapeString(collectionItemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get collection item
   * Returns a metadata object for the provided collectionItemId.
   * @param collectionId Any collection id within the MetaFab ecosystem.   * @param collectionItemId Any item id for the collection. Zero, or a positive integer.
  */
  public void getCollectionItem (String collectionId, BigDecimal collectionItemId, final Response.Listener<Object> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling getCollectionItem",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling getCollectionItem"));
    }
    // verify the required parameter 'collectionItemId' is set
    if (collectionItemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionItemId' when calling getCollectionItem",
        new ApiException(400, "Missing the required parameter 'collectionItemId' when calling getCollectionItem"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/items/{collectionItemId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString())).replaceAll("\\{" + "collectionItemId" + "\\}", apiInvoker.escapeString(collectionItemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Object) ApiInvoker.deserialize(localVarResponse,  "", Object.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get collection item balance
  * Returns the current collection item balance of the provided collectionItemId for the provided wallet address or the wallet address associated with the provided walletId.
   * @param collectionId Any collection id within the MetaFab ecosystem.
   * @param collectionItemId Any item id for the collection. Zero, or a positive integer.
   * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.
   * @param walletId Any wallet id within the MetaFab ecosystem.
   * @return BigDecimal
  */
  public BigDecimal getCollectionItemBalance (String collectionId, BigDecimal collectionItemId, String address, String walletId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling getCollectionItemBalance",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling getCollectionItemBalance"));
    }
    // verify the required parameter 'collectionItemId' is set
    if (collectionItemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionItemId' when calling getCollectionItemBalance",
        new ApiException(400, "Missing the required parameter 'collectionItemId' when calling getCollectionItemBalance"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/items/{collectionItemId}/balances".replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString())).replaceAll("\\{" + "collectionItemId" + "\\}", apiInvoker.escapeString(collectionItemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "address", address));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "walletId", walletId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (BigDecimal) ApiInvoker.deserialize(localVarResponse, "", BigDecimal.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get collection item balance
   * Returns the current collection item balance of the provided collectionItemId for the provided wallet address or the wallet address associated with the provided walletId.
   * @param collectionId Any collection id within the MetaFab ecosystem.   * @param collectionItemId Any item id for the collection. Zero, or a positive integer.   * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.   * @param walletId Any wallet id within the MetaFab ecosystem.
  */
  public void getCollectionItemBalance (String collectionId, BigDecimal collectionItemId, String address, String walletId, final Response.Listener<BigDecimal> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling getCollectionItemBalance",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling getCollectionItemBalance"));
    }
    // verify the required parameter 'collectionItemId' is set
    if (collectionItemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionItemId' when calling getCollectionItemBalance",
        new ApiException(400, "Missing the required parameter 'collectionItemId' when calling getCollectionItemBalance"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/items/{collectionItemId}/balances".replaceAll("\\{format\\}","json").replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString())).replaceAll("\\{" + "collectionItemId" + "\\}", apiInvoker.escapeString(collectionItemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "address", address));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "walletId", walletId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BigDecimal) ApiInvoker.deserialize(localVarResponse,  "", BigDecimal.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get collection item balances
  * Returns the current collection item balances of all collection items for the provided wallet address or the wallet address associated with the provided walletId.
   * @param collectionId Any collection id within the MetaFab ecosystem.
   * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.
   * @param walletId Any wallet id within the MetaFab ecosystem.
   * @return Map<String, BigDecimal>
  */
  public Map<String, BigDecimal> getCollectionItemBalances (String collectionId, String address, String walletId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling getCollectionItemBalances",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling getCollectionItemBalances"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/balances".replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "address", address));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "walletId", walletId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Map<String, BigDecimal>) ApiInvoker.deserialize(localVarResponse, "map", BigDecimal.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get collection item balances
   * Returns the current collection item balances of all collection items for the provided wallet address or the wallet address associated with the provided walletId.
   * @param collectionId Any collection id within the MetaFab ecosystem.   * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.   * @param walletId Any wallet id within the MetaFab ecosystem.
  */
  public void getCollectionItemBalances (String collectionId, String address, String walletId, final Response.Listener<Map<String, BigDecimal>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling getCollectionItemBalances",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling getCollectionItemBalances"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/balances".replaceAll("\\{format\\}","json").replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "address", address));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "walletId", walletId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Map<String, BigDecimal>) ApiInvoker.deserialize(localVarResponse,  "map", BigDecimal.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get collection item supplies
  * Returns the currency circulating supply of all collection items.
   * @param collectionId Any collection id within the MetaFab ecosystem.
   * @return Map<String, BigDecimal>
  */
  public Map<String, BigDecimal> getCollectionItemSupplies (String collectionId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling getCollectionItemSupplies",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling getCollectionItemSupplies"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/supplies".replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Map<String, BigDecimal>) ApiInvoker.deserialize(localVarResponse, "map", BigDecimal.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get collection item supplies
   * Returns the currency circulating supply of all collection items.
   * @param collectionId Any collection id within the MetaFab ecosystem.
  */
  public void getCollectionItemSupplies (String collectionId, final Response.Listener<Map<String, BigDecimal>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling getCollectionItemSupplies",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling getCollectionItemSupplies"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/supplies".replaceAll("\\{format\\}","json").replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Map<String, BigDecimal>) ApiInvoker.deserialize(localVarResponse,  "map", BigDecimal.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get collection item supply
  * Returns the current circulating supply of the provided collectionItemId.
   * @param collectionId Any collection id within the MetaFab ecosystem.
   * @param collectionItemId Any item id for the collection. Zero, or a positive integer.
   * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.
   * @param walletId Any wallet id within the MetaFab ecosystem.
   * @return BigDecimal
  */
  public BigDecimal getCollectionItemSupply (String collectionId, BigDecimal collectionItemId, String address, String walletId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling getCollectionItemSupply",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling getCollectionItemSupply"));
    }
    // verify the required parameter 'collectionItemId' is set
    if (collectionItemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionItemId' when calling getCollectionItemSupply",
        new ApiException(400, "Missing the required parameter 'collectionItemId' when calling getCollectionItemSupply"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/items/{collectionItemId}/supplies".replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString())).replaceAll("\\{" + "collectionItemId" + "\\}", apiInvoker.escapeString(collectionItemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "address", address));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "walletId", walletId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (BigDecimal) ApiInvoker.deserialize(localVarResponse, "", BigDecimal.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get collection item supply
   * Returns the current circulating supply of the provided collectionItemId.
   * @param collectionId Any collection id within the MetaFab ecosystem.   * @param collectionItemId Any item id for the collection. Zero, or a positive integer.   * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.   * @param walletId Any wallet id within the MetaFab ecosystem.
  */
  public void getCollectionItemSupply (String collectionId, BigDecimal collectionItemId, String address, String walletId, final Response.Listener<BigDecimal> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling getCollectionItemSupply",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling getCollectionItemSupply"));
    }
    // verify the required parameter 'collectionItemId' is set
    if (collectionItemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionItemId' when calling getCollectionItemSupply",
        new ApiException(400, "Missing the required parameter 'collectionItemId' when calling getCollectionItemSupply"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/items/{collectionItemId}/supplies".replaceAll("\\{format\\}","json").replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString())).replaceAll("\\{" + "collectionItemId" + "\\}", apiInvoker.escapeString(collectionItemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "address", address));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "walletId", walletId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BigDecimal) ApiInvoker.deserialize(localVarResponse,  "", BigDecimal.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get collection item timelock
  * Returns a timestamp (in seconds) for when the provided collectionItemId&#39;s transfer timelock expires. A value of 0 means the provided collectionItemId does not have a timelock set. Timelocks prevent items of a specific collectionItemId from being transferred until the set timelock timestamp has been surpassed.
   * @param collectionId Any collection id within the MetaFab ecosystem.
   * @param collectionItemId Any item id for the collection. Zero, or a positive integer.
   * @return BigDecimal
  */
  public BigDecimal getCollectionItemTimelock (String collectionId, BigDecimal collectionItemId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling getCollectionItemTimelock",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling getCollectionItemTimelock"));
    }
    // verify the required parameter 'collectionItemId' is set
    if (collectionItemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionItemId' when calling getCollectionItemTimelock",
        new ApiException(400, "Missing the required parameter 'collectionItemId' when calling getCollectionItemTimelock"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/items/{collectionItemId}/timelocks".replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString())).replaceAll("\\{" + "collectionItemId" + "\\}", apiInvoker.escapeString(collectionItemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (BigDecimal) ApiInvoker.deserialize(localVarResponse, "", BigDecimal.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get collection item timelock
   * Returns a timestamp (in seconds) for when the provided collectionItemId&#39;s transfer timelock expires. A value of 0 means the provided collectionItemId does not have a timelock set. Timelocks prevent items of a specific collectionItemId from being transferred until the set timelock timestamp has been surpassed.
   * @param collectionId Any collection id within the MetaFab ecosystem.   * @param collectionItemId Any item id for the collection. Zero, or a positive integer.
  */
  public void getCollectionItemTimelock (String collectionId, BigDecimal collectionItemId, final Response.Listener<BigDecimal> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling getCollectionItemTimelock",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling getCollectionItemTimelock"));
    }
    // verify the required parameter 'collectionItemId' is set
    if (collectionItemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionItemId' when calling getCollectionItemTimelock",
        new ApiException(400, "Missing the required parameter 'collectionItemId' when calling getCollectionItemTimelock"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/items/{collectionItemId}/timelocks".replaceAll("\\{format\\}","json").replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString())).replaceAll("\\{" + "collectionItemId" + "\\}", apiInvoker.escapeString(collectionItemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BigDecimal) ApiInvoker.deserialize(localVarResponse,  "", BigDecimal.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get collection items
  * Returns all collection items as an array of metadata objects.  Please note that ONLY items that have had at least 1 quantity minted will be returned. If you&#39;ve created an item that has not been minted yet, it will not be returned in the array response.
   * @param collectionId Any collection id within the MetaFab ecosystem.
   * @return List<Object>
  */
  public List<Object> getCollectionItems (String collectionId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling getCollectionItems",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling getCollectionItems"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/items".replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<Object>) ApiInvoker.deserialize(localVarResponse, "array", Object.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get collection items
   * Returns all collection items as an array of metadata objects.  Please note that ONLY items that have had at least 1 quantity minted will be returned. If you&#39;ve created an item that has not been minted yet, it will not be returned in the array response.
   * @param collectionId Any collection id within the MetaFab ecosystem.
  */
  public void getCollectionItems (String collectionId, final Response.Listener<List<Object>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling getCollectionItems",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling getCollectionItems"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/items".replaceAll("\\{format\\}","json").replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Object>) ApiInvoker.deserialize(localVarResponse,  "array", Object.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get collection role
  * Returns a boolean (true/false) representing if the provided role for this collection has been granted to the provided address or address associated with the provided walletId.
   * @param collectionId Any collection id within the MetaFab ecosystem.
   * @param role A valid MetaFab role or bytes string representing a role, such as &#x60;0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7&#x60;
   * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.
   * @param walletId Any wallet id within the MetaFab ecosystem.
   * @return Boolean
  */
  public Boolean getCollectionRole (String collectionId, String role, String address, String walletId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling getCollectionRole",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling getCollectionRole"));
    }
    // verify the required parameter 'role' is set
    if (role == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'role' when calling getCollectionRole",
        new ApiException(400, "Missing the required parameter 'role' when calling getCollectionRole"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/roles".replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "role", role));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "address", address));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "walletId", walletId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Boolean) ApiInvoker.deserialize(localVarResponse, "", Boolean.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get collection role
   * Returns a boolean (true/false) representing if the provided role for this collection has been granted to the provided address or address associated with the provided walletId.
   * @param collectionId Any collection id within the MetaFab ecosystem.   * @param role A valid MetaFab role or bytes string representing a role, such as &#x60;0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7&#x60;   * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.   * @param walletId Any wallet id within the MetaFab ecosystem.
  */
  public void getCollectionRole (String collectionId, String role, String address, String walletId, final Response.Listener<Boolean> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling getCollectionRole",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling getCollectionRole"));
    }
    // verify the required parameter 'role' is set
    if (role == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'role' when calling getCollectionRole",
        new ApiException(400, "Missing the required parameter 'role' when calling getCollectionRole"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/roles".replaceAll("\\{format\\}","json").replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "role", role));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "address", address));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "walletId", walletId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Boolean) ApiInvoker.deserialize(localVarResponse,  "", Boolean.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get collections
  * Returns an array of active item collections for the game associated with the provided &#x60;X-Game-Key&#x60;.
   * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.
   * @return List<GetCollections200ResponseInner>
  */
  public List<GetCollections200ResponseInner> getCollections (String xGameKey) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'xGameKey' is set
    if (xGameKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGameKey' when calling getCollections",
        new ApiException(400, "Missing the required parameter 'xGameKey' when calling getCollections"));
    }

    // create path and map variables
    String path = "/v1/collections";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Game-Key", ApiInvoker.parameterToString(xGameKey));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<GetCollections200ResponseInner>) ApiInvoker.deserialize(localVarResponse, "array", GetCollections200ResponseInner.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get collections
   * Returns an array of active item collections for the game associated with the provided &#x60;X-Game-Key&#x60;.
   * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.
  */
  public void getCollections (String xGameKey, final Response.Listener<List<GetCollections200ResponseInner>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'xGameKey' is set
    if (xGameKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGameKey' when calling getCollections",
        new ApiException(400, "Missing the required parameter 'xGameKey' when calling getCollections"));
    }

    // create path and map variables
    String path = "/v1/collections".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Game-Key", ApiInvoker.parameterToString(xGameKey));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<GetCollections200ResponseInner>) ApiInvoker.deserialize(localVarResponse,  "array", GetCollections200ResponseInner.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Grant collection role
  * Grants the provided role for the collection to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the collection for specific players, addresses, or contracts to perform different types of permissioned collection operations.
   * @param collectionId Any collection id within the MetaFab ecosystem.
   * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.
   * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
   * @param grantCollectionRoleRequest 
   * @return TransactionModel
  */
  public TransactionModel grantCollectionRole (String collectionId, String xAuthorization, String xPassword, GrantCollectionRoleRequest grantCollectionRoleRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = grantCollectionRoleRequest;
    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling grantCollectionRole",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling grantCollectionRole"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling grantCollectionRole",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling grantCollectionRole"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling grantCollectionRole",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling grantCollectionRole"));
    }
    // verify the required parameter 'grantCollectionRoleRequest' is set
    if (grantCollectionRoleRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'grantCollectionRoleRequest' when calling grantCollectionRole",
        new ApiException(400, "Missing the required parameter 'grantCollectionRoleRequest' when calling grantCollectionRole"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/roles".replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TransactionModel) ApiInvoker.deserialize(localVarResponse, "", TransactionModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Grant collection role
   * Grants the provided role for the collection to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the collection for specific players, addresses, or contracts to perform different types of permissioned collection operations.
   * @param collectionId Any collection id within the MetaFab ecosystem.   * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.   * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.   * @param grantCollectionRoleRequest 
  */
  public void grantCollectionRole (String collectionId, String xAuthorization, String xPassword, GrantCollectionRoleRequest grantCollectionRoleRequest, final Response.Listener<TransactionModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = grantCollectionRoleRequest;

    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling grantCollectionRole",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling grantCollectionRole"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling grantCollectionRole",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling grantCollectionRole"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling grantCollectionRole",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling grantCollectionRole"));
    }
    // verify the required parameter 'grantCollectionRoleRequest' is set
    if (grantCollectionRoleRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'grantCollectionRoleRequest' when calling grantCollectionRole",
        new ApiException(400, "Missing the required parameter 'grantCollectionRoleRequest' when calling grantCollectionRole"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/roles".replaceAll("\\{format\\}","json").replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TransactionModel) ApiInvoker.deserialize(localVarResponse,  "", TransactionModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Mint collection item
  * Creates (mints) the specified quantity of the provided collectionItemId to the provided wallet address or wallet address associated with the provided walletId.
   * @param collectionId Any collection id within the MetaFab ecosystem.
   * @param collectionItemId Any item id for the collection. Zero, or a positive integer.
   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.
   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
   * @param mintCollectionItemRequest 
   * @return TransactionModel
  */
  public TransactionModel mintCollectionItem (String collectionId, BigDecimal collectionItemId, String xAuthorization, String xPassword, MintCollectionItemRequest mintCollectionItemRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = mintCollectionItemRequest;
    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling mintCollectionItem",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling mintCollectionItem"));
    }
    // verify the required parameter 'collectionItemId' is set
    if (collectionItemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionItemId' when calling mintCollectionItem",
        new ApiException(400, "Missing the required parameter 'collectionItemId' when calling mintCollectionItem"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling mintCollectionItem",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling mintCollectionItem"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling mintCollectionItem",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling mintCollectionItem"));
    }
    // verify the required parameter 'mintCollectionItemRequest' is set
    if (mintCollectionItemRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mintCollectionItemRequest' when calling mintCollectionItem",
        new ApiException(400, "Missing the required parameter 'mintCollectionItemRequest' when calling mintCollectionItem"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/items/{collectionItemId}/mints".replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString())).replaceAll("\\{" + "collectionItemId" + "\\}", apiInvoker.escapeString(collectionItemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TransactionModel) ApiInvoker.deserialize(localVarResponse, "", TransactionModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Mint collection item
   * Creates (mints) the specified quantity of the provided collectionItemId to the provided wallet address or wallet address associated with the provided walletId.
   * @param collectionId Any collection id within the MetaFab ecosystem.   * @param collectionItemId Any item id for the collection. Zero, or a positive integer.   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.   * @param mintCollectionItemRequest 
  */
  public void mintCollectionItem (String collectionId, BigDecimal collectionItemId, String xAuthorization, String xPassword, MintCollectionItemRequest mintCollectionItemRequest, final Response.Listener<TransactionModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = mintCollectionItemRequest;

    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling mintCollectionItem",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling mintCollectionItem"));
    }
    // verify the required parameter 'collectionItemId' is set
    if (collectionItemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionItemId' when calling mintCollectionItem",
        new ApiException(400, "Missing the required parameter 'collectionItemId' when calling mintCollectionItem"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling mintCollectionItem",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling mintCollectionItem"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling mintCollectionItem",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling mintCollectionItem"));
    }
    // verify the required parameter 'mintCollectionItemRequest' is set
    if (mintCollectionItemRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mintCollectionItemRequest' when calling mintCollectionItem",
        new ApiException(400, "Missing the required parameter 'mintCollectionItemRequest' when calling mintCollectionItem"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/items/{collectionItemId}/mints".replaceAll("\\{format\\}","json").replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString())).replaceAll("\\{" + "collectionItemId" + "\\}", apiInvoker.escapeString(collectionItemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TransactionModel) ApiInvoker.deserialize(localVarResponse,  "", TransactionModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Revoke collection role
  * Revokes the provided role for the collection to the provided address or address associated with the provided walletId.
   * @param collectionId Any collection id within the MetaFab ecosystem.
   * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.
   * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
   * @param revokeCollectionRoleRequest 
   * @return TransactionModel
  */
  public TransactionModel revokeCollectionRole (String collectionId, String xAuthorization, String xPassword, RevokeCollectionRoleRequest revokeCollectionRoleRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = revokeCollectionRoleRequest;
    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling revokeCollectionRole",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling revokeCollectionRole"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling revokeCollectionRole",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling revokeCollectionRole"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling revokeCollectionRole",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling revokeCollectionRole"));
    }
    // verify the required parameter 'revokeCollectionRoleRequest' is set
    if (revokeCollectionRoleRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'revokeCollectionRoleRequest' when calling revokeCollectionRole",
        new ApiException(400, "Missing the required parameter 'revokeCollectionRoleRequest' when calling revokeCollectionRole"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/roles".replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TransactionModel) ApiInvoker.deserialize(localVarResponse, "", TransactionModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Revoke collection role
   * Revokes the provided role for the collection to the provided address or address associated with the provided walletId.
   * @param collectionId Any collection id within the MetaFab ecosystem.   * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.   * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.   * @param revokeCollectionRoleRequest 
  */
  public void revokeCollectionRole (String collectionId, String xAuthorization, String xPassword, RevokeCollectionRoleRequest revokeCollectionRoleRequest, final Response.Listener<TransactionModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = revokeCollectionRoleRequest;

    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling revokeCollectionRole",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling revokeCollectionRole"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling revokeCollectionRole",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling revokeCollectionRole"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling revokeCollectionRole",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling revokeCollectionRole"));
    }
    // verify the required parameter 'revokeCollectionRoleRequest' is set
    if (revokeCollectionRoleRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'revokeCollectionRoleRequest' when calling revokeCollectionRole",
        new ApiException(400, "Missing the required parameter 'revokeCollectionRoleRequest' when calling revokeCollectionRole"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/roles".replaceAll("\\{format\\}","json").replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TransactionModel) ApiInvoker.deserialize(localVarResponse,  "", TransactionModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Set collection approval
  * Sets approval for the provided address or wallet address associated with the provided walletId to operate on behalf of the authenticating game or player&#39;s owned items for this collection. Setting an approved value of &#x60;true&#x60; allows the provided address or address associated with the provided walletId to transfer and burn items from this collection on behalf of the authenticated game or player&#39;s wallet address.
   * @param collectionId Any collection id within the MetaFab ecosystem.
   * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.
   * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
   * @param setCollectionApprovalRequest 
   * @return TransactionModel
  */
  public TransactionModel setCollectionApproval (String collectionId, String xAuthorization, String xPassword, SetCollectionApprovalRequest setCollectionApprovalRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = setCollectionApprovalRequest;
    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling setCollectionApproval",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling setCollectionApproval"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling setCollectionApproval",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling setCollectionApproval"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling setCollectionApproval",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling setCollectionApproval"));
    }
    // verify the required parameter 'setCollectionApprovalRequest' is set
    if (setCollectionApprovalRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'setCollectionApprovalRequest' when calling setCollectionApproval",
        new ApiException(400, "Missing the required parameter 'setCollectionApprovalRequest' when calling setCollectionApproval"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/approvals".replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TransactionModel) ApiInvoker.deserialize(localVarResponse, "", TransactionModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Set collection approval
   * Sets approval for the provided address or wallet address associated with the provided walletId to operate on behalf of the authenticating game or player&#39;s owned items for this collection. Setting an approved value of &#x60;true&#x60; allows the provided address or address associated with the provided walletId to transfer and burn items from this collection on behalf of the authenticated game or player&#39;s wallet address.
   * @param collectionId Any collection id within the MetaFab ecosystem.   * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.   * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.   * @param setCollectionApprovalRequest 
  */
  public void setCollectionApproval (String collectionId, String xAuthorization, String xPassword, SetCollectionApprovalRequest setCollectionApprovalRequest, final Response.Listener<TransactionModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = setCollectionApprovalRequest;

    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling setCollectionApproval",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling setCollectionApproval"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling setCollectionApproval",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling setCollectionApproval"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling setCollectionApproval",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling setCollectionApproval"));
    }
    // verify the required parameter 'setCollectionApprovalRequest' is set
    if (setCollectionApprovalRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'setCollectionApprovalRequest' when calling setCollectionApproval",
        new ApiException(400, "Missing the required parameter 'setCollectionApprovalRequest' when calling setCollectionApproval"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/approvals".replaceAll("\\{format\\}","json").replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TransactionModel) ApiInvoker.deserialize(localVarResponse,  "", TransactionModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Set collection item timelock
  * Sets the item timelock for the provided collection itemId. The timelock is a unix timestamp (in seconds) that defines a period in time of when an item may be transferred by players. Until the timelock timestamp has passed, the itemId for the given timelock may not be transferred, sold, traded, etc. A timelock of 0 (default) means that there is no timelock set on the itemId and it can be freely transferred, traded, etc.
   * @param collectionId Any collection id within the MetaFab ecosystem.
   * @param collectionItemId Any item id for the collection. Zero, or a positive integer.
   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.
   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
   * @param setCollectionItemTimelockRequest 
   * @return TransactionModel
  */
  public TransactionModel setCollectionItemTimelock (String collectionId, BigDecimal collectionItemId, String xAuthorization, String xPassword, SetCollectionItemTimelockRequest setCollectionItemTimelockRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = setCollectionItemTimelockRequest;
    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling setCollectionItemTimelock",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling setCollectionItemTimelock"));
    }
    // verify the required parameter 'collectionItemId' is set
    if (collectionItemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionItemId' when calling setCollectionItemTimelock",
        new ApiException(400, "Missing the required parameter 'collectionItemId' when calling setCollectionItemTimelock"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling setCollectionItemTimelock",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling setCollectionItemTimelock"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling setCollectionItemTimelock",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling setCollectionItemTimelock"));
    }
    // verify the required parameter 'setCollectionItemTimelockRequest' is set
    if (setCollectionItemTimelockRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'setCollectionItemTimelockRequest' when calling setCollectionItemTimelock",
        new ApiException(400, "Missing the required parameter 'setCollectionItemTimelockRequest' when calling setCollectionItemTimelock"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/items/{collectionItemId}/timelocks".replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString())).replaceAll("\\{" + "collectionItemId" + "\\}", apiInvoker.escapeString(collectionItemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TransactionModel) ApiInvoker.deserialize(localVarResponse, "", TransactionModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Set collection item timelock
   * Sets the item timelock for the provided collection itemId. The timelock is a unix timestamp (in seconds) that defines a period in time of when an item may be transferred by players. Until the timelock timestamp has passed, the itemId for the given timelock may not be transferred, sold, traded, etc. A timelock of 0 (default) means that there is no timelock set on the itemId and it can be freely transferred, traded, etc.
   * @param collectionId Any collection id within the MetaFab ecosystem.   * @param collectionItemId Any item id for the collection. Zero, or a positive integer.   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.   * @param setCollectionItemTimelockRequest 
  */
  public void setCollectionItemTimelock (String collectionId, BigDecimal collectionItemId, String xAuthorization, String xPassword, SetCollectionItemTimelockRequest setCollectionItemTimelockRequest, final Response.Listener<TransactionModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = setCollectionItemTimelockRequest;

    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling setCollectionItemTimelock",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling setCollectionItemTimelock"));
    }
    // verify the required parameter 'collectionItemId' is set
    if (collectionItemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionItemId' when calling setCollectionItemTimelock",
        new ApiException(400, "Missing the required parameter 'collectionItemId' when calling setCollectionItemTimelock"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling setCollectionItemTimelock",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling setCollectionItemTimelock"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling setCollectionItemTimelock",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling setCollectionItemTimelock"));
    }
    // verify the required parameter 'setCollectionItemTimelockRequest' is set
    if (setCollectionItemTimelockRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'setCollectionItemTimelockRequest' when calling setCollectionItemTimelock",
        new ApiException(400, "Missing the required parameter 'setCollectionItemTimelockRequest' when calling setCollectionItemTimelock"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/items/{collectionItemId}/timelocks".replaceAll("\\{format\\}","json").replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString())).replaceAll("\\{" + "collectionItemId" + "\\}", apiInvoker.escapeString(collectionItemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TransactionModel) ApiInvoker.deserialize(localVarResponse,  "", TransactionModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Transfer collection item
  * Transfers specified quantity of itemId to the provided wallet address or wallet address associated with the provided walletId.
   * @param collectionId Any collection id within the MetaFab ecosystem.
   * @param collectionItemId Any item id for the collection. Zero, or a positive integer.
   * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.
   * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
   * @param transferCollectionItemRequest 
   * @return TransactionModel
  */
  public TransactionModel transferCollectionItem (String collectionId, BigDecimal collectionItemId, String xAuthorization, String xPassword, TransferCollectionItemRequest transferCollectionItemRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = transferCollectionItemRequest;
    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling transferCollectionItem",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling transferCollectionItem"));
    }
    // verify the required parameter 'collectionItemId' is set
    if (collectionItemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionItemId' when calling transferCollectionItem",
        new ApiException(400, "Missing the required parameter 'collectionItemId' when calling transferCollectionItem"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling transferCollectionItem",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling transferCollectionItem"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling transferCollectionItem",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling transferCollectionItem"));
    }
    // verify the required parameter 'transferCollectionItemRequest' is set
    if (transferCollectionItemRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'transferCollectionItemRequest' when calling transferCollectionItem",
        new ApiException(400, "Missing the required parameter 'transferCollectionItemRequest' when calling transferCollectionItem"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/items/{collectionItemId}/transfers".replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString())).replaceAll("\\{" + "collectionItemId" + "\\}", apiInvoker.escapeString(collectionItemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TransactionModel) ApiInvoker.deserialize(localVarResponse, "", TransactionModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Transfer collection item
   * Transfers specified quantity of itemId to the provided wallet address or wallet address associated with the provided walletId.
   * @param collectionId Any collection id within the MetaFab ecosystem.   * @param collectionItemId Any item id for the collection. Zero, or a positive integer.   * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.   * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.   * @param transferCollectionItemRequest 
  */
  public void transferCollectionItem (String collectionId, BigDecimal collectionItemId, String xAuthorization, String xPassword, TransferCollectionItemRequest transferCollectionItemRequest, final Response.Listener<TransactionModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = transferCollectionItemRequest;

    // verify the required parameter 'collectionId' is set
    if (collectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionId' when calling transferCollectionItem",
        new ApiException(400, "Missing the required parameter 'collectionId' when calling transferCollectionItem"));
    }
    // verify the required parameter 'collectionItemId' is set
    if (collectionItemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'collectionItemId' when calling transferCollectionItem",
        new ApiException(400, "Missing the required parameter 'collectionItemId' when calling transferCollectionItem"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling transferCollectionItem",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling transferCollectionItem"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling transferCollectionItem",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling transferCollectionItem"));
    }
    // verify the required parameter 'transferCollectionItemRequest' is set
    if (transferCollectionItemRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'transferCollectionItemRequest' when calling transferCollectionItem",
        new ApiException(400, "Missing the required parameter 'transferCollectionItemRequest' when calling transferCollectionItem"));
    }

    // create path and map variables
    String path = "/v1/collections/{collectionId}/items/{collectionItemId}/transfers".replaceAll("\\{format\\}","json").replaceAll("\\{" + "collectionId" + "\\}", apiInvoker.escapeString(collectionId.toString())).replaceAll("\\{" + "collectionItemId" + "\\}", apiInvoker.escapeString(collectionItemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TransactionModel) ApiInvoker.deserialize(localVarResponse,  "", TransactionModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
