/**
 * MetaFab API
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.metafab.client.api;

import org.metafab.client.ApiInvoker;
import org.metafab.client.ApiException;
import org.metafab.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.CreateLootboxManager200Response;
import org.openapitools.client.model.CreateLootboxManagerRequest;
import org.openapitools.client.model.GetLootboxManagers200ResponseInner;
import org.openapitools.client.model.LootboxManagerLootbox;
import org.openapitools.client.model.SetLootboxManagerLootboxRequest;
import org.openapitools.client.model.TransactionModel;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class LootboxesApi {
  String basePath = "https://api.trymetafab.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Create lootbox manager
  * Creates a new game lootbox manager and deploys a lootbox manager contract on behalf of the authenticating game&#39;s primary wallet. The deployed lootbox manager contract allows you to create lootbox behavior for existing items. For example, you can define item id(s) from one of your item collections as the requirement(s) to open a \&quot;lootbox\&quot;. The required item(s) would be burned from the interacting player&#39;s wallet and the player would receive item(s) from a weighted randomized set of possible items the lootbox can contain.
   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.
   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
   * @param createLootboxManagerRequest 
   * @return CreateLootboxManager200Response
  */
  public CreateLootboxManager200Response createLootboxManager (String xAuthorization, String xPassword, CreateLootboxManagerRequest createLootboxManagerRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = createLootboxManagerRequest;
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling createLootboxManager",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling createLootboxManager"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling createLootboxManager",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling createLootboxManager"));
    }
    // verify the required parameter 'createLootboxManagerRequest' is set
    if (createLootboxManagerRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createLootboxManagerRequest' when calling createLootboxManager",
        new ApiException(400, "Missing the required parameter 'createLootboxManagerRequest' when calling createLootboxManager"));
    }

    // create path and map variables
    String path = "/v1/lootboxManagers";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CreateLootboxManager200Response) ApiInvoker.deserialize(localVarResponse, "", CreateLootboxManager200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create lootbox manager
   * Creates a new game lootbox manager and deploys a lootbox manager contract on behalf of the authenticating game&#39;s primary wallet. The deployed lootbox manager contract allows you to create lootbox behavior for existing items. For example, you can define item id(s) from one of your item collections as the requirement(s) to open a \&quot;lootbox\&quot;. The required item(s) would be burned from the interacting player&#39;s wallet and the player would receive item(s) from a weighted randomized set of possible items the lootbox can contain.
   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.   * @param createLootboxManagerRequest 
  */
  public void createLootboxManager (String xAuthorization, String xPassword, CreateLootboxManagerRequest createLootboxManagerRequest, final Response.Listener<CreateLootboxManager200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = createLootboxManagerRequest;

    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling createLootboxManager",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling createLootboxManager"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling createLootboxManager",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling createLootboxManager"));
    }
    // verify the required parameter 'createLootboxManagerRequest' is set
    if (createLootboxManagerRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createLootboxManagerRequest' when calling createLootboxManager",
        new ApiException(400, "Missing the required parameter 'createLootboxManagerRequest' when calling createLootboxManager"));
    }

    // create path and map variables
    String path = "/v1/lootboxManagers".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CreateLootboxManager200Response) ApiInvoker.deserialize(localVarResponse,  "", CreateLootboxManager200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get lootbox manager lootbox
  * Returns a lootbox manager lootbox object for the provided lootboxManagerLootboxId.
   * @param lootboxManagerId Any lootbox manager id within the MetaFab ecosystem.
   * @param lootboxManagerLootboxId Any lootbox manager lootbox id within the MetaFab ecosystem.
   * @return LootboxManagerLootbox
  */
  public LootboxManagerLootbox getLootboxManagerLootbox (String lootboxManagerId, String lootboxManagerLootboxId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'lootboxManagerId' is set
    if (lootboxManagerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lootboxManagerId' when calling getLootboxManagerLootbox",
        new ApiException(400, "Missing the required parameter 'lootboxManagerId' when calling getLootboxManagerLootbox"));
    }
    // verify the required parameter 'lootboxManagerLootboxId' is set
    if (lootboxManagerLootboxId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lootboxManagerLootboxId' when calling getLootboxManagerLootbox",
        new ApiException(400, "Missing the required parameter 'lootboxManagerLootboxId' when calling getLootboxManagerLootbox"));
    }

    // create path and map variables
    String path = "/v1/lootboxManagers/{lootboxManagerId}/lootboxes/{lootboxManagerLootboxId}".replaceAll("\\{" + "lootboxManagerId" + "\\}", apiInvoker.escapeString(lootboxManagerId.toString())).replaceAll("\\{" + "lootboxManagerLootboxId" + "\\}", apiInvoker.escapeString(lootboxManagerLootboxId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (LootboxManagerLootbox) ApiInvoker.deserialize(localVarResponse, "", LootboxManagerLootbox.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get lootbox manager lootbox
   * Returns a lootbox manager lootbox object for the provided lootboxManagerLootboxId.
   * @param lootboxManagerId Any lootbox manager id within the MetaFab ecosystem.   * @param lootboxManagerLootboxId Any lootbox manager lootbox id within the MetaFab ecosystem.
  */
  public void getLootboxManagerLootbox (String lootboxManagerId, String lootboxManagerLootboxId, final Response.Listener<LootboxManagerLootbox> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'lootboxManagerId' is set
    if (lootboxManagerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lootboxManagerId' when calling getLootboxManagerLootbox",
        new ApiException(400, "Missing the required parameter 'lootboxManagerId' when calling getLootboxManagerLootbox"));
    }
    // verify the required parameter 'lootboxManagerLootboxId' is set
    if (lootboxManagerLootboxId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lootboxManagerLootboxId' when calling getLootboxManagerLootbox",
        new ApiException(400, "Missing the required parameter 'lootboxManagerLootboxId' when calling getLootboxManagerLootbox"));
    }

    // create path and map variables
    String path = "/v1/lootboxManagers/{lootboxManagerId}/lootboxes/{lootboxManagerLootboxId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "lootboxManagerId" + "\\}", apiInvoker.escapeString(lootboxManagerId.toString())).replaceAll("\\{" + "lootboxManagerLootboxId" + "\\}", apiInvoker.escapeString(lootboxManagerLootboxId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((LootboxManagerLootbox) ApiInvoker.deserialize(localVarResponse,  "", LootboxManagerLootbox.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get lootbox manager lootboxes
  * Returns all lootbox manager lootboxes as an array of lootbox objects.
   * @param lootboxManagerId Any lootbox manager id within the MetaFab ecosystem.
   * @return List<LootboxManagerLootbox>
  */
  public List<LootboxManagerLootbox> getLootboxManagerLootboxes (String lootboxManagerId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'lootboxManagerId' is set
    if (lootboxManagerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lootboxManagerId' when calling getLootboxManagerLootboxes",
        new ApiException(400, "Missing the required parameter 'lootboxManagerId' when calling getLootboxManagerLootboxes"));
    }

    // create path and map variables
    String path = "/v1/lootboxManagers/{lootboxManagerId}/lootboxes".replaceAll("\\{" + "lootboxManagerId" + "\\}", apiInvoker.escapeString(lootboxManagerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<LootboxManagerLootbox>) ApiInvoker.deserialize(localVarResponse, "array", LootboxManagerLootbox.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get lootbox manager lootboxes
   * Returns all lootbox manager lootboxes as an array of lootbox objects.
   * @param lootboxManagerId Any lootbox manager id within the MetaFab ecosystem.
  */
  public void getLootboxManagerLootboxes (String lootboxManagerId, final Response.Listener<List<LootboxManagerLootbox>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'lootboxManagerId' is set
    if (lootboxManagerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lootboxManagerId' when calling getLootboxManagerLootboxes",
        new ApiException(400, "Missing the required parameter 'lootboxManagerId' when calling getLootboxManagerLootboxes"));
    }

    // create path and map variables
    String path = "/v1/lootboxManagers/{lootboxManagerId}/lootboxes".replaceAll("\\{format\\}","json").replaceAll("\\{" + "lootboxManagerId" + "\\}", apiInvoker.escapeString(lootboxManagerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<LootboxManagerLootbox>) ApiInvoker.deserialize(localVarResponse,  "array", LootboxManagerLootbox.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get lootbox managers
  * Returns an array of active lootbox managers for the game associated with the provided &#x60;X-Game-Key&#x60;.
   * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.
   * @return List<GetLootboxManagers200ResponseInner>
  */
  public List<GetLootboxManagers200ResponseInner> getLootboxManagers (String xGameKey) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'xGameKey' is set
    if (xGameKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGameKey' when calling getLootboxManagers",
        new ApiException(400, "Missing the required parameter 'xGameKey' when calling getLootboxManagers"));
    }

    // create path and map variables
    String path = "/v1/lootboxManagers";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Game-Key", ApiInvoker.parameterToString(xGameKey));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<GetLootboxManagers200ResponseInner>) ApiInvoker.deserialize(localVarResponse, "array", GetLootboxManagers200ResponseInner.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get lootbox managers
   * Returns an array of active lootbox managers for the game associated with the provided &#x60;X-Game-Key&#x60;.
   * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.
  */
  public void getLootboxManagers (String xGameKey, final Response.Listener<List<GetLootboxManagers200ResponseInner>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'xGameKey' is set
    if (xGameKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGameKey' when calling getLootboxManagers",
        new ApiException(400, "Missing the required parameter 'xGameKey' when calling getLootboxManagers"));
    }

    // create path and map variables
    String path = "/v1/lootboxManagers".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Game-Key", ApiInvoker.parameterToString(xGameKey));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<GetLootboxManagers200ResponseInner>) ApiInvoker.deserialize(localVarResponse,  "array", GetLootboxManagers200ResponseInner.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Open lootbox manager lootbox
  * Opens a lootbox manager lootbox. The required input item(s) are burned from the wallet or player wallet opening the lootbox. The given output item(s) are given to the wallet or player wallet opening the lootbox.
   * @param lootboxManagerId Any lootbox manager id within the MetaFab ecosystem.
   * @param lootboxManagerLootboxId Any lootbox manager lootbox id within the MetaFab ecosystem.
   * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.
   * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
   * @return List<TransactionModel>
  */
  public List<TransactionModel> openLootboxManagerLootbox (String lootboxManagerId, String lootboxManagerLootboxId, String xAuthorization, String xPassword) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'lootboxManagerId' is set
    if (lootboxManagerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lootboxManagerId' when calling openLootboxManagerLootbox",
        new ApiException(400, "Missing the required parameter 'lootboxManagerId' when calling openLootboxManagerLootbox"));
    }
    // verify the required parameter 'lootboxManagerLootboxId' is set
    if (lootboxManagerLootboxId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lootboxManagerLootboxId' when calling openLootboxManagerLootbox",
        new ApiException(400, "Missing the required parameter 'lootboxManagerLootboxId' when calling openLootboxManagerLootbox"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling openLootboxManagerLootbox",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling openLootboxManagerLootbox"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling openLootboxManagerLootbox",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling openLootboxManagerLootbox"));
    }

    // create path and map variables
    String path = "/v1/lootboxManagers/{lootboxManagerId}/lootboxes/{lootboxManagerLootboxId}/opens".replaceAll("\\{" + "lootboxManagerId" + "\\}", apiInvoker.escapeString(lootboxManagerId.toString())).replaceAll("\\{" + "lootboxManagerLootboxId" + "\\}", apiInvoker.escapeString(lootboxManagerLootboxId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<TransactionModel>) ApiInvoker.deserialize(localVarResponse, "array", TransactionModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Open lootbox manager lootbox
   * Opens a lootbox manager lootbox. The required input item(s) are burned from the wallet or player wallet opening the lootbox. The given output item(s) are given to the wallet or player wallet opening the lootbox.
   * @param lootboxManagerId Any lootbox manager id within the MetaFab ecosystem.   * @param lootboxManagerLootboxId Any lootbox manager lootbox id within the MetaFab ecosystem.   * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.   * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
  */
  public void openLootboxManagerLootbox (String lootboxManagerId, String lootboxManagerLootboxId, String xAuthorization, String xPassword, final Response.Listener<List<TransactionModel>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'lootboxManagerId' is set
    if (lootboxManagerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lootboxManagerId' when calling openLootboxManagerLootbox",
        new ApiException(400, "Missing the required parameter 'lootboxManagerId' when calling openLootboxManagerLootbox"));
    }
    // verify the required parameter 'lootboxManagerLootboxId' is set
    if (lootboxManagerLootboxId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lootboxManagerLootboxId' when calling openLootboxManagerLootbox",
        new ApiException(400, "Missing the required parameter 'lootboxManagerLootboxId' when calling openLootboxManagerLootbox"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling openLootboxManagerLootbox",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling openLootboxManagerLootbox"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling openLootboxManagerLootbox",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling openLootboxManagerLootbox"));
    }

    // create path and map variables
    String path = "/v1/lootboxManagers/{lootboxManagerId}/lootboxes/{lootboxManagerLootboxId}/opens".replaceAll("\\{format\\}","json").replaceAll("\\{" + "lootboxManagerId" + "\\}", apiInvoker.escapeString(lootboxManagerId.toString())).replaceAll("\\{" + "lootboxManagerLootboxId" + "\\}", apiInvoker.escapeString(lootboxManagerLootboxId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<TransactionModel>) ApiInvoker.deserialize(localVarResponse,  "array", TransactionModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Remove lootbox manager lootbox
  * Removes the provided lootbox by lootboxId from the provided lootbox manager. Removed lootboxes can no longer be used.
   * @param lootboxManagerId Any lootbox manager id within the MetaFab ecosystem.
   * @param lootboxManagerLootboxId Any lootbox manager lootbox id within the MetaFab ecosystem.
   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.
   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
   * @return TransactionModel
  */
  public TransactionModel removeLootboxManagerLootbox (String lootboxManagerId, String lootboxManagerLootboxId, String xAuthorization, String xPassword) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'lootboxManagerId' is set
    if (lootboxManagerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lootboxManagerId' when calling removeLootboxManagerLootbox",
        new ApiException(400, "Missing the required parameter 'lootboxManagerId' when calling removeLootboxManagerLootbox"));
    }
    // verify the required parameter 'lootboxManagerLootboxId' is set
    if (lootboxManagerLootboxId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lootboxManagerLootboxId' when calling removeLootboxManagerLootbox",
        new ApiException(400, "Missing the required parameter 'lootboxManagerLootboxId' when calling removeLootboxManagerLootbox"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling removeLootboxManagerLootbox",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling removeLootboxManagerLootbox"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling removeLootboxManagerLootbox",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling removeLootboxManagerLootbox"));
    }

    // create path and map variables
    String path = "/v1/lootboxManagers/{lootboxManagerId}/lootboxes/{lootboxManagerLootboxId}".replaceAll("\\{" + "lootboxManagerId" + "\\}", apiInvoker.escapeString(lootboxManagerId.toString())).replaceAll("\\{" + "lootboxManagerLootboxId" + "\\}", apiInvoker.escapeString(lootboxManagerLootboxId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TransactionModel) ApiInvoker.deserialize(localVarResponse, "", TransactionModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Remove lootbox manager lootbox
   * Removes the provided lootbox by lootboxId from the provided lootbox manager. Removed lootboxes can no longer be used.
   * @param lootboxManagerId Any lootbox manager id within the MetaFab ecosystem.   * @param lootboxManagerLootboxId Any lootbox manager lootbox id within the MetaFab ecosystem.   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
  */
  public void removeLootboxManagerLootbox (String lootboxManagerId, String lootboxManagerLootboxId, String xAuthorization, String xPassword, final Response.Listener<TransactionModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'lootboxManagerId' is set
    if (lootboxManagerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lootboxManagerId' when calling removeLootboxManagerLootbox",
        new ApiException(400, "Missing the required parameter 'lootboxManagerId' when calling removeLootboxManagerLootbox"));
    }
    // verify the required parameter 'lootboxManagerLootboxId' is set
    if (lootboxManagerLootboxId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lootboxManagerLootboxId' when calling removeLootboxManagerLootbox",
        new ApiException(400, "Missing the required parameter 'lootboxManagerLootboxId' when calling removeLootboxManagerLootbox"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling removeLootboxManagerLootbox",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling removeLootboxManagerLootbox"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling removeLootboxManagerLootbox",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling removeLootboxManagerLootbox"));
    }

    // create path and map variables
    String path = "/v1/lootboxManagers/{lootboxManagerId}/lootboxes/{lootboxManagerLootboxId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "lootboxManagerId" + "\\}", apiInvoker.escapeString(lootboxManagerId.toString())).replaceAll("\\{" + "lootboxManagerLootboxId" + "\\}", apiInvoker.escapeString(lootboxManagerLootboxId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TransactionModel) ApiInvoker.deserialize(localVarResponse,  "", TransactionModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Set lootbox manager lootbox
  * Sets a new lootbox manager lootbox or updates an existing one for the provided id. Lootboxes allow item(s) to be burned to receive a random set of possible item(s) based on probability weight.  Lootboxes can require any number of unique types of items and quantities to open a created lootbox type within the system. A common pattern with lootboxes is to create a lootbox item type within an item collection, and require it as the input item type.
   * @param lootboxManagerId Any lootbox manager id within the MetaFab ecosystem.
   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.
   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
   * @param setLootboxManagerLootboxRequest 
   * @return TransactionModel
  */
  public TransactionModel setLootboxManagerLootbox (String lootboxManagerId, String xAuthorization, String xPassword, SetLootboxManagerLootboxRequest setLootboxManagerLootboxRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = setLootboxManagerLootboxRequest;
    // verify the required parameter 'lootboxManagerId' is set
    if (lootboxManagerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lootboxManagerId' when calling setLootboxManagerLootbox",
        new ApiException(400, "Missing the required parameter 'lootboxManagerId' when calling setLootboxManagerLootbox"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling setLootboxManagerLootbox",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling setLootboxManagerLootbox"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling setLootboxManagerLootbox",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling setLootboxManagerLootbox"));
    }
    // verify the required parameter 'setLootboxManagerLootboxRequest' is set
    if (setLootboxManagerLootboxRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'setLootboxManagerLootboxRequest' when calling setLootboxManagerLootbox",
        new ApiException(400, "Missing the required parameter 'setLootboxManagerLootboxRequest' when calling setLootboxManagerLootbox"));
    }

    // create path and map variables
    String path = "/v1/lootboxManagers/{lootboxManagerId}/lootboxes".replaceAll("\\{" + "lootboxManagerId" + "\\}", apiInvoker.escapeString(lootboxManagerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TransactionModel) ApiInvoker.deserialize(localVarResponse, "", TransactionModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Set lootbox manager lootbox
   * Sets a new lootbox manager lootbox or updates an existing one for the provided id. Lootboxes allow item(s) to be burned to receive a random set of possible item(s) based on probability weight.  Lootboxes can require any number of unique types of items and quantities to open a created lootbox type within the system. A common pattern with lootboxes is to create a lootbox item type within an item collection, and require it as the input item type.
   * @param lootboxManagerId Any lootbox manager id within the MetaFab ecosystem.   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.   * @param setLootboxManagerLootboxRequest 
  */
  public void setLootboxManagerLootbox (String lootboxManagerId, String xAuthorization, String xPassword, SetLootboxManagerLootboxRequest setLootboxManagerLootboxRequest, final Response.Listener<TransactionModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = setLootboxManagerLootboxRequest;

    // verify the required parameter 'lootboxManagerId' is set
    if (lootboxManagerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lootboxManagerId' when calling setLootboxManagerLootbox",
        new ApiException(400, "Missing the required parameter 'lootboxManagerId' when calling setLootboxManagerLootbox"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling setLootboxManagerLootbox",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling setLootboxManagerLootbox"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling setLootboxManagerLootbox",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling setLootboxManagerLootbox"));
    }
    // verify the required parameter 'setLootboxManagerLootboxRequest' is set
    if (setLootboxManagerLootboxRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'setLootboxManagerLootboxRequest' when calling setLootboxManagerLootbox",
        new ApiException(400, "Missing the required parameter 'setLootboxManagerLootboxRequest' when calling setLootboxManagerLootbox"));
    }

    // create path and map variables
    String path = "/v1/lootboxManagers/{lootboxManagerId}/lootboxes".replaceAll("\\{format\\}","json").replaceAll("\\{" + "lootboxManagerId" + "\\}", apiInvoker.escapeString(lootboxManagerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TransactionModel) ApiInvoker.deserialize(localVarResponse,  "", TransactionModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
