/**
 * MetaFab API
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.metafab.client.api;

import org.metafab.client.ApiInvoker;
import org.metafab.client.ApiException;
import org.metafab.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.BatchTransferCurrencyRequest;
import java.math.BigDecimal;
import org.openapitools.client.model.BurnCurrencyRequest;
import org.openapitools.client.model.CreateCurrency200Response;
import org.openapitools.client.model.CreateCurrencyRequest;
import org.openapitools.client.model.GetCurrencies200ResponseInner;
import org.openapitools.client.model.GetCurrencyFees200Response;
import org.openapitools.client.model.GrantCurrencyRoleRequest;
import org.openapitools.client.model.MintCurrencyRequest;
import org.openapitools.client.model.RevokeCollectionRoleRequest;
import org.openapitools.client.model.SetCurrencyFeesRequest;
import org.openapitools.client.model.TransactionModel;
import org.openapitools.client.model.TransferCurrencyRequest;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class CurrenciesApi {
  String basePath = "https://api.trymetafab.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Batch transfer currency
  * Transfers multiple amounts of currency to multiple provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request, the proper receipients will be automatically determined, with &#x60;addresses&#x60; getting &#x60;amounts&#x60; order priority first.  Optional references may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
   * @param currencyId Any currency id within the MetaFab ecosystem.
   * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.
   * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
   * @param batchTransferCurrencyRequest 
   * @return TransactionModel
  */
  public TransactionModel batchTransferCurrency (String currencyId, String xAuthorization, String xPassword, BatchTransferCurrencyRequest batchTransferCurrencyRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = batchTransferCurrencyRequest;
    // verify the required parameter 'currencyId' is set
    if (currencyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'currencyId' when calling batchTransferCurrency",
        new ApiException(400, "Missing the required parameter 'currencyId' when calling batchTransferCurrency"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling batchTransferCurrency",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling batchTransferCurrency"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling batchTransferCurrency",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling batchTransferCurrency"));
    }
    // verify the required parameter 'batchTransferCurrencyRequest' is set
    if (batchTransferCurrencyRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'batchTransferCurrencyRequest' when calling batchTransferCurrency",
        new ApiException(400, "Missing the required parameter 'batchTransferCurrencyRequest' when calling batchTransferCurrency"));
    }

    // create path and map variables
    String path = "/v1/currencies/{currencyId}/batchTransfers".replaceAll("\\{" + "currencyId" + "\\}", apiInvoker.escapeString(currencyId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TransactionModel) ApiInvoker.deserialize(localVarResponse, "", TransactionModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Batch transfer currency
   * Transfers multiple amounts of currency to multiple provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request, the proper receipients will be automatically determined, with &#x60;addresses&#x60; getting &#x60;amounts&#x60; order priority first.  Optional references may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
   * @param currencyId Any currency id within the MetaFab ecosystem.   * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.   * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.   * @param batchTransferCurrencyRequest 
  */
  public void batchTransferCurrency (String currencyId, String xAuthorization, String xPassword, BatchTransferCurrencyRequest batchTransferCurrencyRequest, final Response.Listener<TransactionModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = batchTransferCurrencyRequest;

    // verify the required parameter 'currencyId' is set
    if (currencyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'currencyId' when calling batchTransferCurrency",
        new ApiException(400, "Missing the required parameter 'currencyId' when calling batchTransferCurrency"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling batchTransferCurrency",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling batchTransferCurrency"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling batchTransferCurrency",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling batchTransferCurrency"));
    }
    // verify the required parameter 'batchTransferCurrencyRequest' is set
    if (batchTransferCurrencyRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'batchTransferCurrencyRequest' when calling batchTransferCurrency",
        new ApiException(400, "Missing the required parameter 'batchTransferCurrencyRequest' when calling batchTransferCurrency"));
    }

    // create path and map variables
    String path = "/v1/currencies/{currencyId}/batchTransfers".replaceAll("\\{format\\}","json").replaceAll("\\{" + "currencyId" + "\\}", apiInvoker.escapeString(currencyId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TransactionModel) ApiInvoker.deserialize(localVarResponse,  "", TransactionModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Burn currency
  * Removes (burns) the provided amount of currency from the authenticating game or players wallet. The currency amount is permanently removed from the circulating supply of the currency.
   * @param currencyId Any currency id within the MetaFab ecosystem.
   * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.
   * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
   * @param burnCurrencyRequest 
   * @return TransactionModel
  */
  public TransactionModel burnCurrency (String currencyId, String xAuthorization, String xPassword, BurnCurrencyRequest burnCurrencyRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = burnCurrencyRequest;
    // verify the required parameter 'currencyId' is set
    if (currencyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'currencyId' when calling burnCurrency",
        new ApiException(400, "Missing the required parameter 'currencyId' when calling burnCurrency"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling burnCurrency",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling burnCurrency"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling burnCurrency",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling burnCurrency"));
    }
    // verify the required parameter 'burnCurrencyRequest' is set
    if (burnCurrencyRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'burnCurrencyRequest' when calling burnCurrency",
        new ApiException(400, "Missing the required parameter 'burnCurrencyRequest' when calling burnCurrency"));
    }

    // create path and map variables
    String path = "/v1/currencies/{currencyId}/burns".replaceAll("\\{" + "currencyId" + "\\}", apiInvoker.escapeString(currencyId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TransactionModel) ApiInvoker.deserialize(localVarResponse, "", TransactionModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Burn currency
   * Removes (burns) the provided amount of currency from the authenticating game or players wallet. The currency amount is permanently removed from the circulating supply of the currency.
   * @param currencyId Any currency id within the MetaFab ecosystem.   * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.   * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.   * @param burnCurrencyRequest 
  */
  public void burnCurrency (String currencyId, String xAuthorization, String xPassword, BurnCurrencyRequest burnCurrencyRequest, final Response.Listener<TransactionModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = burnCurrencyRequest;

    // verify the required parameter 'currencyId' is set
    if (currencyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'currencyId' when calling burnCurrency",
        new ApiException(400, "Missing the required parameter 'currencyId' when calling burnCurrency"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling burnCurrency",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling burnCurrency"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling burnCurrency",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling burnCurrency"));
    }
    // verify the required parameter 'burnCurrencyRequest' is set
    if (burnCurrencyRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'burnCurrencyRequest' when calling burnCurrency",
        new ApiException(400, "Missing the required parameter 'burnCurrencyRequest' when calling burnCurrency"));
    }

    // create path and map variables
    String path = "/v1/currencies/{currencyId}/burns".replaceAll("\\{format\\}","json").replaceAll("\\{" + "currencyId" + "\\}", apiInvoker.escapeString(currencyId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TransactionModel) ApiInvoker.deserialize(localVarResponse,  "", TransactionModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create currency
  * Creates a new game currency and deploys an ERC20 token contract on behalf of the authenticating game&#39;s primary wallet. The deployed ERC20 contract is preconfigured to fully support bridging across blockchains, batched transfers and gasless transactions on any supported blockchain as well as full support for gasless transactions from player managed wallets.
   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.
   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
   * @param createCurrencyRequest 
   * @return CreateCurrency200Response
  */
  public CreateCurrency200Response createCurrency (String xAuthorization, String xPassword, CreateCurrencyRequest createCurrencyRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = createCurrencyRequest;
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling createCurrency",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling createCurrency"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling createCurrency",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling createCurrency"));
    }
    // verify the required parameter 'createCurrencyRequest' is set
    if (createCurrencyRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createCurrencyRequest' when calling createCurrency",
        new ApiException(400, "Missing the required parameter 'createCurrencyRequest' when calling createCurrency"));
    }

    // create path and map variables
    String path = "/v1/currencies";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CreateCurrency200Response) ApiInvoker.deserialize(localVarResponse, "", CreateCurrency200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create currency
   * Creates a new game currency and deploys an ERC20 token contract on behalf of the authenticating game&#39;s primary wallet. The deployed ERC20 contract is preconfigured to fully support bridging across blockchains, batched transfers and gasless transactions on any supported blockchain as well as full support for gasless transactions from player managed wallets.
   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.   * @param createCurrencyRequest 
  */
  public void createCurrency (String xAuthorization, String xPassword, CreateCurrencyRequest createCurrencyRequest, final Response.Listener<CreateCurrency200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = createCurrencyRequest;

    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling createCurrency",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling createCurrency"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling createCurrency",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling createCurrency"));
    }
    // verify the required parameter 'createCurrencyRequest' is set
    if (createCurrencyRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createCurrencyRequest' when calling createCurrency",
        new ApiException(400, "Missing the required parameter 'createCurrencyRequest' when calling createCurrency"));
    }

    // create path and map variables
    String path = "/v1/currencies".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CreateCurrency200Response) ApiInvoker.deserialize(localVarResponse,  "", CreateCurrency200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get currencies
  * Returns an array of active currencies for the game associated with the provided &#x60;X-Game-Key&#x60;.
   * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.
   * @return List<GetCurrencies200ResponseInner>
  */
  public List<GetCurrencies200ResponseInner> getCurrencies (String xGameKey) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'xGameKey' is set
    if (xGameKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGameKey' when calling getCurrencies",
        new ApiException(400, "Missing the required parameter 'xGameKey' when calling getCurrencies"));
    }

    // create path and map variables
    String path = "/v1/currencies";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Game-Key", ApiInvoker.parameterToString(xGameKey));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<GetCurrencies200ResponseInner>) ApiInvoker.deserialize(localVarResponse, "array", GetCurrencies200ResponseInner.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get currencies
   * Returns an array of active currencies for the game associated with the provided &#x60;X-Game-Key&#x60;.
   * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.
  */
  public void getCurrencies (String xGameKey, final Response.Listener<List<GetCurrencies200ResponseInner>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'xGameKey' is set
    if (xGameKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGameKey' when calling getCurrencies",
        new ApiException(400, "Missing the required parameter 'xGameKey' when calling getCurrencies"));
    }

    // create path and map variables
    String path = "/v1/currencies".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Game-Key", ApiInvoker.parameterToString(xGameKey));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<GetCurrencies200ResponseInner>) ApiInvoker.deserialize(localVarResponse,  "array", GetCurrencies200ResponseInner.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get currency balance
  * Returns the current currency balance of the provided wallet address or or the wallet address associated with the provided walletId.
   * @param currencyId Any currency id within the MetaFab ecosystem.
   * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.
   * @param walletId Any wallet id within the MetaFab ecosystem.
   * @return BigDecimal
  */
  public BigDecimal getCurrencyBalance (String currencyId, String address, String walletId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'currencyId' is set
    if (currencyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'currencyId' when calling getCurrencyBalance",
        new ApiException(400, "Missing the required parameter 'currencyId' when calling getCurrencyBalance"));
    }

    // create path and map variables
    String path = "/v1/currencies/{currencyId}/balances".replaceAll("\\{" + "currencyId" + "\\}", apiInvoker.escapeString(currencyId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "address", address));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "walletId", walletId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (BigDecimal) ApiInvoker.deserialize(localVarResponse, "", BigDecimal.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get currency balance
   * Returns the current currency balance of the provided wallet address or or the wallet address associated with the provided walletId.
   * @param currencyId Any currency id within the MetaFab ecosystem.   * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.   * @param walletId Any wallet id within the MetaFab ecosystem.
  */
  public void getCurrencyBalance (String currencyId, String address, String walletId, final Response.Listener<BigDecimal> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'currencyId' is set
    if (currencyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'currencyId' when calling getCurrencyBalance",
        new ApiException(400, "Missing the required parameter 'currencyId' when calling getCurrencyBalance"));
    }

    // create path and map variables
    String path = "/v1/currencies/{currencyId}/balances".replaceAll("\\{format\\}","json").replaceAll("\\{" + "currencyId" + "\\}", apiInvoker.escapeString(currencyId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "address", address));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "walletId", walletId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BigDecimal) ApiInvoker.deserialize(localVarResponse,  "", BigDecimal.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get currency fees
  * Returns the current fee recipient address and fees of the currency for the provided currencyId. Fees are only applicable for gasless transactions performed by default by players.
   * @param currencyId Any currency id within the MetaFab ecosystem.
   * @return GetCurrencyFees200Response
  */
  public GetCurrencyFees200Response getCurrencyFees (String currencyId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'currencyId' is set
    if (currencyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'currencyId' when calling getCurrencyFees",
        new ApiException(400, "Missing the required parameter 'currencyId' when calling getCurrencyFees"));
    }

    // create path and map variables
    String path = "/v1/currencies/{currencyId}/fees".replaceAll("\\{" + "currencyId" + "\\}", apiInvoker.escapeString(currencyId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetCurrencyFees200Response) ApiInvoker.deserialize(localVarResponse, "", GetCurrencyFees200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get currency fees
   * Returns the current fee recipient address and fees of the currency for the provided currencyId. Fees are only applicable for gasless transactions performed by default by players.
   * @param currencyId Any currency id within the MetaFab ecosystem.
  */
  public void getCurrencyFees (String currencyId, final Response.Listener<GetCurrencyFees200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'currencyId' is set
    if (currencyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'currencyId' when calling getCurrencyFees",
        new ApiException(400, "Missing the required parameter 'currencyId' when calling getCurrencyFees"));
    }

    // create path and map variables
    String path = "/v1/currencies/{currencyId}/fees".replaceAll("\\{format\\}","json").replaceAll("\\{" + "currencyId" + "\\}", apiInvoker.escapeString(currencyId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetCurrencyFees200Response) ApiInvoker.deserialize(localVarResponse,  "", GetCurrencyFees200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get currency role
  * Returns a boolean (true/false) representing if the provided role for this currency has been granted to the provided address or address associated with the provided walletId.
   * @param currencyId Any currency id within the MetaFab ecosystem.
   * @param role A valid MetaFab role or bytes string representing a role, such as &#x60;0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7&#x60;
   * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.
   * @param walletId Any wallet id within the MetaFab ecosystem.
   * @return Boolean
  */
  public Boolean getCurrencyRole (String currencyId, String role, String address, String walletId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'currencyId' is set
    if (currencyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'currencyId' when calling getCurrencyRole",
        new ApiException(400, "Missing the required parameter 'currencyId' when calling getCurrencyRole"));
    }
    // verify the required parameter 'role' is set
    if (role == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'role' when calling getCurrencyRole",
        new ApiException(400, "Missing the required parameter 'role' when calling getCurrencyRole"));
    }

    // create path and map variables
    String path = "/v1/currencies/{currencyId}/roles".replaceAll("\\{" + "currencyId" + "\\}", apiInvoker.escapeString(currencyId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "role", role));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "address", address));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "walletId", walletId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Boolean) ApiInvoker.deserialize(localVarResponse, "", Boolean.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get currency role
   * Returns a boolean (true/false) representing if the provided role for this currency has been granted to the provided address or address associated with the provided walletId.
   * @param currencyId Any currency id within the MetaFab ecosystem.   * @param role A valid MetaFab role or bytes string representing a role, such as &#x60;0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7&#x60;   * @param address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.   * @param walletId Any wallet id within the MetaFab ecosystem.
  */
  public void getCurrencyRole (String currencyId, String role, String address, String walletId, final Response.Listener<Boolean> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'currencyId' is set
    if (currencyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'currencyId' when calling getCurrencyRole",
        new ApiException(400, "Missing the required parameter 'currencyId' when calling getCurrencyRole"));
    }
    // verify the required parameter 'role' is set
    if (role == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'role' when calling getCurrencyRole",
        new ApiException(400, "Missing the required parameter 'role' when calling getCurrencyRole"));
    }

    // create path and map variables
    String path = "/v1/currencies/{currencyId}/roles".replaceAll("\\{format\\}","json").replaceAll("\\{" + "currencyId" + "\\}", apiInvoker.escapeString(currencyId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "role", role));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "address", address));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "walletId", walletId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Boolean) ApiInvoker.deserialize(localVarResponse,  "", Boolean.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Grant currency role
  * Grants the provided role for the currency to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the currency for specific players, addresses, or contracts to perform different types of permissioned currency operations.
   * @param currencyId Any currency id within the MetaFab ecosystem.
   * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.
   * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
   * @param grantCurrencyRoleRequest 
   * @return TransactionModel
  */
  public TransactionModel grantCurrencyRole (String currencyId, String xAuthorization, String xPassword, GrantCurrencyRoleRequest grantCurrencyRoleRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = grantCurrencyRoleRequest;
    // verify the required parameter 'currencyId' is set
    if (currencyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'currencyId' when calling grantCurrencyRole",
        new ApiException(400, "Missing the required parameter 'currencyId' when calling grantCurrencyRole"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling grantCurrencyRole",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling grantCurrencyRole"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling grantCurrencyRole",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling grantCurrencyRole"));
    }
    // verify the required parameter 'grantCurrencyRoleRequest' is set
    if (grantCurrencyRoleRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'grantCurrencyRoleRequest' when calling grantCurrencyRole",
        new ApiException(400, "Missing the required parameter 'grantCurrencyRoleRequest' when calling grantCurrencyRole"));
    }

    // create path and map variables
    String path = "/v1/currencies/{currencyId}/roles".replaceAll("\\{" + "currencyId" + "\\}", apiInvoker.escapeString(currencyId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TransactionModel) ApiInvoker.deserialize(localVarResponse, "", TransactionModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Grant currency role
   * Grants the provided role for the currency to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the currency for specific players, addresses, or contracts to perform different types of permissioned currency operations.
   * @param currencyId Any currency id within the MetaFab ecosystem.   * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.   * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.   * @param grantCurrencyRoleRequest 
  */
  public void grantCurrencyRole (String currencyId, String xAuthorization, String xPassword, GrantCurrencyRoleRequest grantCurrencyRoleRequest, final Response.Listener<TransactionModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = grantCurrencyRoleRequest;

    // verify the required parameter 'currencyId' is set
    if (currencyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'currencyId' when calling grantCurrencyRole",
        new ApiException(400, "Missing the required parameter 'currencyId' when calling grantCurrencyRole"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling grantCurrencyRole",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling grantCurrencyRole"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling grantCurrencyRole",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling grantCurrencyRole"));
    }
    // verify the required parameter 'grantCurrencyRoleRequest' is set
    if (grantCurrencyRoleRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'grantCurrencyRoleRequest' when calling grantCurrencyRole",
        new ApiException(400, "Missing the required parameter 'grantCurrencyRoleRequest' when calling grantCurrencyRole"));
    }

    // create path and map variables
    String path = "/v1/currencies/{currencyId}/roles".replaceAll("\\{format\\}","json").replaceAll("\\{" + "currencyId" + "\\}", apiInvoker.escapeString(currencyId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TransactionModel) ApiInvoker.deserialize(localVarResponse,  "", TransactionModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Mint currency
  * Creates (mints) the provided amount of currency to the provided wallet address or wallet address associated with the provided walletId.
   * @param currencyId Any currency id within the MetaFab ecosystem.
   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.
   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
   * @param mintCurrencyRequest 
   * @return TransactionModel
  */
  public TransactionModel mintCurrency (String currencyId, String xAuthorization, String xPassword, MintCurrencyRequest mintCurrencyRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = mintCurrencyRequest;
    // verify the required parameter 'currencyId' is set
    if (currencyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'currencyId' when calling mintCurrency",
        new ApiException(400, "Missing the required parameter 'currencyId' when calling mintCurrency"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling mintCurrency",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling mintCurrency"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling mintCurrency",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling mintCurrency"));
    }
    // verify the required parameter 'mintCurrencyRequest' is set
    if (mintCurrencyRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mintCurrencyRequest' when calling mintCurrency",
        new ApiException(400, "Missing the required parameter 'mintCurrencyRequest' when calling mintCurrency"));
    }

    // create path and map variables
    String path = "/v1/currencies/{currencyId}/mints".replaceAll("\\{" + "currencyId" + "\\}", apiInvoker.escapeString(currencyId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TransactionModel) ApiInvoker.deserialize(localVarResponse, "", TransactionModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Mint currency
   * Creates (mints) the provided amount of currency to the provided wallet address or wallet address associated with the provided walletId.
   * @param currencyId Any currency id within the MetaFab ecosystem.   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.   * @param mintCurrencyRequest 
  */
  public void mintCurrency (String currencyId, String xAuthorization, String xPassword, MintCurrencyRequest mintCurrencyRequest, final Response.Listener<TransactionModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = mintCurrencyRequest;

    // verify the required parameter 'currencyId' is set
    if (currencyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'currencyId' when calling mintCurrency",
        new ApiException(400, "Missing the required parameter 'currencyId' when calling mintCurrency"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling mintCurrency",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling mintCurrency"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling mintCurrency",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling mintCurrency"));
    }
    // verify the required parameter 'mintCurrencyRequest' is set
    if (mintCurrencyRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mintCurrencyRequest' when calling mintCurrency",
        new ApiException(400, "Missing the required parameter 'mintCurrencyRequest' when calling mintCurrency"));
    }

    // create path and map variables
    String path = "/v1/currencies/{currencyId}/mints".replaceAll("\\{format\\}","json").replaceAll("\\{" + "currencyId" + "\\}", apiInvoker.escapeString(currencyId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TransactionModel) ApiInvoker.deserialize(localVarResponse,  "", TransactionModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Revoke currency role
  * Revokes the provided role for the currency to the provided address or address associated with the provided walletId.
   * @param currencyId Any currency id within the MetaFab ecosystem.
   * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.
   * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
   * @param revokeCollectionRoleRequest 
   * @return TransactionModel
  */
  public TransactionModel revokeCurrencyRole (String currencyId, String xAuthorization, String xPassword, RevokeCollectionRoleRequest revokeCollectionRoleRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = revokeCollectionRoleRequest;
    // verify the required parameter 'currencyId' is set
    if (currencyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'currencyId' when calling revokeCurrencyRole",
        new ApiException(400, "Missing the required parameter 'currencyId' when calling revokeCurrencyRole"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling revokeCurrencyRole",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling revokeCurrencyRole"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling revokeCurrencyRole",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling revokeCurrencyRole"));
    }
    // verify the required parameter 'revokeCollectionRoleRequest' is set
    if (revokeCollectionRoleRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'revokeCollectionRoleRequest' when calling revokeCurrencyRole",
        new ApiException(400, "Missing the required parameter 'revokeCollectionRoleRequest' when calling revokeCurrencyRole"));
    }

    // create path and map variables
    String path = "/v1/currencies/{currencyId}/roles".replaceAll("\\{" + "currencyId" + "\\}", apiInvoker.escapeString(currencyId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TransactionModel) ApiInvoker.deserialize(localVarResponse, "", TransactionModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Revoke currency role
   * Revokes the provided role for the currency to the provided address or address associated with the provided walletId.
   * @param currencyId Any currency id within the MetaFab ecosystem.   * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.   * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.   * @param revokeCollectionRoleRequest 
  */
  public void revokeCurrencyRole (String currencyId, String xAuthorization, String xPassword, RevokeCollectionRoleRequest revokeCollectionRoleRequest, final Response.Listener<TransactionModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = revokeCollectionRoleRequest;

    // verify the required parameter 'currencyId' is set
    if (currencyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'currencyId' when calling revokeCurrencyRole",
        new ApiException(400, "Missing the required parameter 'currencyId' when calling revokeCurrencyRole"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling revokeCurrencyRole",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling revokeCurrencyRole"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling revokeCurrencyRole",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling revokeCurrencyRole"));
    }
    // verify the required parameter 'revokeCollectionRoleRequest' is set
    if (revokeCollectionRoleRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'revokeCollectionRoleRequest' when calling revokeCurrencyRole",
        new ApiException(400, "Missing the required parameter 'revokeCollectionRoleRequest' when calling revokeCurrencyRole"));
    }

    // create path and map variables
    String path = "/v1/currencies/{currencyId}/roles".replaceAll("\\{format\\}","json").replaceAll("\\{" + "currencyId" + "\\}", apiInvoker.escapeString(currencyId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TransactionModel) ApiInvoker.deserialize(localVarResponse,  "", TransactionModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Set currency fees
  * Sets the recipient address, basis points, fixed amount and cap amount for a currency&#39;s fees.
   * @param currencyId Any currency id within the MetaFab ecosystem.
   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.
   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
   * @param setCurrencyFeesRequest 
   * @return TransactionModel
  */
  public TransactionModel setCurrencyFees (String currencyId, String xAuthorization, String xPassword, SetCurrencyFeesRequest setCurrencyFeesRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = setCurrencyFeesRequest;
    // verify the required parameter 'currencyId' is set
    if (currencyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'currencyId' when calling setCurrencyFees",
        new ApiException(400, "Missing the required parameter 'currencyId' when calling setCurrencyFees"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling setCurrencyFees",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling setCurrencyFees"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling setCurrencyFees",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling setCurrencyFees"));
    }
    // verify the required parameter 'setCurrencyFeesRequest' is set
    if (setCurrencyFeesRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'setCurrencyFeesRequest' when calling setCurrencyFees",
        new ApiException(400, "Missing the required parameter 'setCurrencyFeesRequest' when calling setCurrencyFees"));
    }

    // create path and map variables
    String path = "/v1/currencies/{currencyId}/fees".replaceAll("\\{" + "currencyId" + "\\}", apiInvoker.escapeString(currencyId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TransactionModel) ApiInvoker.deserialize(localVarResponse, "", TransactionModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Set currency fees
   * Sets the recipient address, basis points, fixed amount and cap amount for a currency&#39;s fees.
   * @param currencyId Any currency id within the MetaFab ecosystem.   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.   * @param setCurrencyFeesRequest 
  */
  public void setCurrencyFees (String currencyId, String xAuthorization, String xPassword, SetCurrencyFeesRequest setCurrencyFeesRequest, final Response.Listener<TransactionModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = setCurrencyFeesRequest;

    // verify the required parameter 'currencyId' is set
    if (currencyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'currencyId' when calling setCurrencyFees",
        new ApiException(400, "Missing the required parameter 'currencyId' when calling setCurrencyFees"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling setCurrencyFees",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling setCurrencyFees"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling setCurrencyFees",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling setCurrencyFees"));
    }
    // verify the required parameter 'setCurrencyFeesRequest' is set
    if (setCurrencyFeesRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'setCurrencyFeesRequest' when calling setCurrencyFees",
        new ApiException(400, "Missing the required parameter 'setCurrencyFeesRequest' when calling setCurrencyFees"));
    }

    // create path and map variables
    String path = "/v1/currencies/{currencyId}/fees".replaceAll("\\{format\\}","json").replaceAll("\\{" + "currencyId" + "\\}", apiInvoker.escapeString(currencyId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TransactionModel) ApiInvoker.deserialize(localVarResponse,  "", TransactionModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Transfer currency
  * Transfers an amount of currency to the provided wallet address or wallet address associated with the provided walletId. If you want to transfer to multiple wallets with different amounts and optional references in one API request, please see the Batch transfer currency documentation.  An optional reference may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
   * @param currencyId Any currency id within the MetaFab ecosystem.
   * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.
   * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
   * @param transferCurrencyRequest 
   * @return TransactionModel
  */
  public TransactionModel transferCurrency (String currencyId, String xAuthorization, String xPassword, TransferCurrencyRequest transferCurrencyRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = transferCurrencyRequest;
    // verify the required parameter 'currencyId' is set
    if (currencyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'currencyId' when calling transferCurrency",
        new ApiException(400, "Missing the required parameter 'currencyId' when calling transferCurrency"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling transferCurrency",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling transferCurrency"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling transferCurrency",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling transferCurrency"));
    }
    // verify the required parameter 'transferCurrencyRequest' is set
    if (transferCurrencyRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'transferCurrencyRequest' when calling transferCurrency",
        new ApiException(400, "Missing the required parameter 'transferCurrencyRequest' when calling transferCurrency"));
    }

    // create path and map variables
    String path = "/v1/currencies/{currencyId}/transfers".replaceAll("\\{" + "currencyId" + "\\}", apiInvoker.escapeString(currencyId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TransactionModel) ApiInvoker.deserialize(localVarResponse, "", TransactionModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Transfer currency
   * Transfers an amount of currency to the provided wallet address or wallet address associated with the provided walletId. If you want to transfer to multiple wallets with different amounts and optional references in one API request, please see the Batch transfer currency documentation.  An optional reference may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
   * @param currencyId Any currency id within the MetaFab ecosystem.   * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.   * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.   * @param transferCurrencyRequest 
  */
  public void transferCurrency (String currencyId, String xAuthorization, String xPassword, TransferCurrencyRequest transferCurrencyRequest, final Response.Listener<TransactionModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = transferCurrencyRequest;

    // verify the required parameter 'currencyId' is set
    if (currencyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'currencyId' when calling transferCurrency",
        new ApiException(400, "Missing the required parameter 'currencyId' when calling transferCurrency"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling transferCurrency",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling transferCurrency"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling transferCurrency",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling transferCurrency"));
    }
    // verify the required parameter 'transferCurrencyRequest' is set
    if (transferCurrencyRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'transferCurrencyRequest' when calling transferCurrency",
        new ApiException(400, "Missing the required parameter 'transferCurrencyRequest' when calling transferCurrency"));
    }

    // create path and map variables
    String path = "/v1/currencies/{currencyId}/transfers".replaceAll("\\{format\\}","json").replaceAll("\\{" + "currencyId" + "\\}", apiInvoker.escapeString(currencyId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TransactionModel) ApiInvoker.deserialize(localVarResponse,  "", TransactionModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
