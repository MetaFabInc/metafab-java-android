/**
 * MetaFab API
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.metafab.client.api;

import org.metafab.client.ApiInvoker;
import org.metafab.client.ApiException;
import org.metafab.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.ContractModel;
import org.openapitools.client.model.CreateContractRequest;
import org.openapitools.client.model.OasAnyTypeNotMapped;
import org.openapitools.client.model.TransactionModel;
import org.openapitools.client.model.WriteContractRequest;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ContractsApi {
  String basePath = "https://api.trymetafab.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Create custom contract
  * Create a MetaFab custom contract entry from an existing contract address and contract abi. This allows the game and players belonging to the authenticated game to interact with the contract&#39;s read and write functions through MetaFab&#39;s read and write contract endpoints.
   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.
   * @param createContractRequest 
   * @return ContractModel
  */
  public ContractModel createContract (String xAuthorization, CreateContractRequest createContractRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = createContractRequest;
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling createContract",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling createContract"));
    }
    // verify the required parameter 'createContractRequest' is set
    if (createContractRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createContractRequest' when calling createContract",
        new ApiException(400, "Missing the required parameter 'createContractRequest' when calling createContract"));
    }

    // create path and map variables
    String path = "/v1/contracts";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ContractModel) ApiInvoker.deserialize(localVarResponse, "", ContractModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create custom contract
   * Create a MetaFab custom contract entry from an existing contract address and contract abi. This allows the game and players belonging to the authenticated game to interact with the contract&#39;s read and write functions through MetaFab&#39;s read and write contract endpoints.
   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.   * @param createContractRequest 
  */
  public void createContract (String xAuthorization, CreateContractRequest createContractRequest, final Response.Listener<ContractModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = createContractRequest;

    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling createContract",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling createContract"));
    }
    // verify the required parameter 'createContractRequest' is set
    if (createContractRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createContractRequest' when calling createContract",
        new ApiException(400, "Missing the required parameter 'createContractRequest' when calling createContract"));
    }

    // create path and map variables
    String path = "/v1/contracts".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ContractModel) ApiInvoker.deserialize(localVarResponse,  "", ContractModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get contracts
  * Returns an array of active contracts deployed by the game associated with the provided &#x60;X-Game-Key&#x60;.
   * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.
   * @return List<ContractModel>
  */
  public List<ContractModel> getContracts (String xGameKey) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'xGameKey' is set
    if (xGameKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGameKey' when calling getContracts",
        new ApiException(400, "Missing the required parameter 'xGameKey' when calling getContracts"));
    }

    // create path and map variables
    String path = "/v1/contracts";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Game-Key", ApiInvoker.parameterToString(xGameKey));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<ContractModel>) ApiInvoker.deserialize(localVarResponse, "array", ContractModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get contracts
   * Returns an array of active contracts deployed by the game associated with the provided &#x60;X-Game-Key&#x60;.
   * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.
  */
  public void getContracts (String xGameKey, final Response.Listener<List<ContractModel>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'xGameKey' is set
    if (xGameKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGameKey' when calling getContracts",
        new ApiException(400, "Missing the required parameter 'xGameKey' when calling getContracts"));
    }

    // create path and map variables
    String path = "/v1/contracts".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Game-Key", ApiInvoker.parameterToString(xGameKey));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<ContractModel>) ApiInvoker.deserialize(localVarResponse,  "array", ContractModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Read contract data
  * Oftentimes you&#39;ll want to query and retrieve some data from a contract. This is incredibly easy to do for any contract deployed through MetaFab.  Using this endpoint, you can get the data returned by any readable function listed in a contracts ABI. This could be things like querying the totalSupply of a currency contract, the number of owners of an items contract, and more.
   * @param contractId Any contract id within the MetaFab ecosystem.
   * @param func A contract function name. This can be any valid function from the the ABI of the contract you are interacting with. For example, &#x60;balanceOf&#x60;.
   * @param args A comma seperated list of basic data type arguments. This is optional and only necessary if the function being invoked requires arguments per the contract ABI. For example, &#x60;123,\&quot;Hello\&quot;,false&#x60;.
   * @return OasAnyTypeNotMapped
  */
  public OasAnyTypeNotMapped readContract (String contractId, String func, String args) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'contractId' is set
    if (contractId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'contractId' when calling readContract",
        new ApiException(400, "Missing the required parameter 'contractId' when calling readContract"));
    }
    // verify the required parameter 'func' is set
    if (func == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'func' when calling readContract",
        new ApiException(400, "Missing the required parameter 'func' when calling readContract"));
    }

    // create path and map variables
    String path = "/v1/contracts/{contractId}/reads".replaceAll("\\{" + "contractId" + "\\}", apiInvoker.escapeString(contractId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "func", func));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "args", args));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (OasAnyTypeNotMapped) ApiInvoker.deserialize(localVarResponse, "", OasAnyTypeNotMapped.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Read contract data
   * Oftentimes you&#39;ll want to query and retrieve some data from a contract. This is incredibly easy to do for any contract deployed through MetaFab.  Using this endpoint, you can get the data returned by any readable function listed in a contracts ABI. This could be things like querying the totalSupply of a currency contract, the number of owners of an items contract, and more.
   * @param contractId Any contract id within the MetaFab ecosystem.   * @param func A contract function name. This can be any valid function from the the ABI of the contract you are interacting with. For example, &#x60;balanceOf&#x60;.   * @param args A comma seperated list of basic data type arguments. This is optional and only necessary if the function being invoked requires arguments per the contract ABI. For example, &#x60;123,\&quot;Hello\&quot;,false&#x60;.
  */
  public void readContract (String contractId, String func, String args, final Response.Listener<OasAnyTypeNotMapped> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'contractId' is set
    if (contractId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'contractId' when calling readContract",
        new ApiException(400, "Missing the required parameter 'contractId' when calling readContract"));
    }
    // verify the required parameter 'func' is set
    if (func == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'func' when calling readContract",
        new ApiException(400, "Missing the required parameter 'func' when calling readContract"));
    }

    // create path and map variables
    String path = "/v1/contracts/{contractId}/reads".replaceAll("\\{format\\}","json").replaceAll("\\{" + "contractId" + "\\}", apiInvoker.escapeString(contractId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "func", func));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "args", args));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OasAnyTypeNotMapped) ApiInvoker.deserialize(localVarResponse,  "", OasAnyTypeNotMapped.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Write contract data
  * MetaFab&#39;s convenience endpoints for contract interactions may not be flexible enough depending on your use case. For these situations, you can interact with contracts and create transactions directly.  Using this endpoint, you can execute a transaction for any writeable contract method as defined in the contract&#39;s ABI for the MetaFab contractId provided. Both Games and Player resources have authority to use this endpoint to execute transactions against any valid MetaFab contractId.  Additionally, MetaFab will automatically attempt to perform a gasless transaction for players interacting with a contract through this endpoint. Gasless transactions by players through this endpoint will only work if the target contract was deployed through MetaFab or supports MetaFab&#39;s ERC2771 trusted forwarder contract.
   * @param contractId Any contract id within the MetaFab ecosystem.
   * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.
   * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
   * @param writeContractRequest 
   * @return TransactionModel
  */
  public TransactionModel writeContract (String contractId, String xAuthorization, String xPassword, WriteContractRequest writeContractRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = writeContractRequest;
    // verify the required parameter 'contractId' is set
    if (contractId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'contractId' when calling writeContract",
        new ApiException(400, "Missing the required parameter 'contractId' when calling writeContract"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling writeContract",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling writeContract"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling writeContract",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling writeContract"));
    }
    // verify the required parameter 'writeContractRequest' is set
    if (writeContractRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'writeContractRequest' when calling writeContract",
        new ApiException(400, "Missing the required parameter 'writeContractRequest' when calling writeContract"));
    }

    // create path and map variables
    String path = "/v1/contracts/{contractId}/writes".replaceAll("\\{" + "contractId" + "\\}", apiInvoker.escapeString(contractId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TransactionModel) ApiInvoker.deserialize(localVarResponse, "", TransactionModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Write contract data
   * MetaFab&#39;s convenience endpoints for contract interactions may not be flexible enough depending on your use case. For these situations, you can interact with contracts and create transactions directly.  Using this endpoint, you can execute a transaction for any writeable contract method as defined in the contract&#39;s ABI for the MetaFab contractId provided. Both Games and Player resources have authority to use this endpoint to execute transactions against any valid MetaFab contractId.  Additionally, MetaFab will automatically attempt to perform a gasless transaction for players interacting with a contract through this endpoint. Gasless transactions by players through this endpoint will only work if the target contract was deployed through MetaFab or supports MetaFab&#39;s ERC2771 trusted forwarder contract.
   * @param contractId Any contract id within the MetaFab ecosystem.   * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.   * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.   * @param writeContractRequest 
  */
  public void writeContract (String contractId, String xAuthorization, String xPassword, WriteContractRequest writeContractRequest, final Response.Listener<TransactionModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = writeContractRequest;

    // verify the required parameter 'contractId' is set
    if (contractId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'contractId' when calling writeContract",
        new ApiException(400, "Missing the required parameter 'contractId' when calling writeContract"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling writeContract",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling writeContract"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling writeContract",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling writeContract"));
    }
    // verify the required parameter 'writeContractRequest' is set
    if (writeContractRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'writeContractRequest' when calling writeContract",
        new ApiException(400, "Missing the required parameter 'writeContractRequest' when calling writeContract"));
    }

    // create path and map variables
    String path = "/v1/contracts/{contractId}/writes".replaceAll("\\{format\\}","json").replaceAll("\\{" + "contractId" + "\\}", apiInvoker.escapeString(contractId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TransactionModel) ApiInvoker.deserialize(localVarResponse,  "", TransactionModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
