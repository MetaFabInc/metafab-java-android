/**
 * MetaFab API
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.metafab.client.api;

import org.metafab.client.ApiInvoker;
import org.metafab.client.ApiException;
import org.metafab.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.CreateExchange200Response;
import org.openapitools.client.model.CreateExchangeRequest;
import org.openapitools.client.model.ExchangeOffer;
import org.openapitools.client.model.GetExchanges200ResponseInner;
import org.openapitools.client.model.SetExchangeOfferRequest;
import org.openapitools.client.model.TransactionModel;
import org.openapitools.client.model.WithdrawFromExchangeRequest;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ExchangesApi {
  String basePath = "https://api.trymetafab.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Create exchange
  * Creates a new game exchange and deploys a exchange contract on behalf of the authenticating game&#39;s primary wallet. The deployed exchange contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, an exchange allows you to create exchange offers for some set of item(s) to another set of item(s) or any mix of currency. Exchanges completely supports gasless player transactions.
   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.
   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
   * @param createExchangeRequest 
   * @return CreateExchange200Response
  */
  public CreateExchange200Response createExchange (String xAuthorization, String xPassword, CreateExchangeRequest createExchangeRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = createExchangeRequest;
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling createExchange",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling createExchange"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling createExchange",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling createExchange"));
    }
    // verify the required parameter 'createExchangeRequest' is set
    if (createExchangeRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createExchangeRequest' when calling createExchange",
        new ApiException(400, "Missing the required parameter 'createExchangeRequest' when calling createExchange"));
    }

    // create path and map variables
    String path = "/v1/exchanges";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CreateExchange200Response) ApiInvoker.deserialize(localVarResponse, "", CreateExchange200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create exchange
   * Creates a new game exchange and deploys a exchange contract on behalf of the authenticating game&#39;s primary wallet. The deployed exchange contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, an exchange allows you to create exchange offers for some set of item(s) to another set of item(s) or any mix of currency. Exchanges completely supports gasless player transactions.
   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.   * @param createExchangeRequest 
  */
  public void createExchange (String xAuthorization, String xPassword, CreateExchangeRequest createExchangeRequest, final Response.Listener<CreateExchange200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = createExchangeRequest;

    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling createExchange",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling createExchange"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling createExchange",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling createExchange"));
    }
    // verify the required parameter 'createExchangeRequest' is set
    if (createExchangeRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createExchangeRequest' when calling createExchange",
        new ApiException(400, "Missing the required parameter 'createExchangeRequest' when calling createExchange"));
    }

    // create path and map variables
    String path = "/v1/exchanges".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CreateExchange200Response) ApiInvoker.deserialize(localVarResponse,  "", CreateExchange200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get exchange offer
  * Returns a exchange offer object for the provided exchangeOfferId.
   * @param exchangeId Any exchange id within the MetaFab ecosystem.
   * @param exchangeOfferId Any offer id for the exchange. Zero, or a positive integer.
   * @return ExchangeOffer
  */
  public ExchangeOffer getExchangeOffer (String exchangeId, String exchangeOfferId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'exchangeId' is set
    if (exchangeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'exchangeId' when calling getExchangeOffer",
        new ApiException(400, "Missing the required parameter 'exchangeId' when calling getExchangeOffer"));
    }
    // verify the required parameter 'exchangeOfferId' is set
    if (exchangeOfferId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'exchangeOfferId' when calling getExchangeOffer",
        new ApiException(400, "Missing the required parameter 'exchangeOfferId' when calling getExchangeOffer"));
    }

    // create path and map variables
    String path = "/v1/exchanges/{exchangeId}/items/{exchangeOfferId}".replaceAll("\\{" + "exchangeId" + "\\}", apiInvoker.escapeString(exchangeId.toString())).replaceAll("\\{" + "exchangeOfferId" + "\\}", apiInvoker.escapeString(exchangeOfferId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ExchangeOffer) ApiInvoker.deserialize(localVarResponse, "", ExchangeOffer.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get exchange offer
   * Returns a exchange offer object for the provided exchangeOfferId.
   * @param exchangeId Any exchange id within the MetaFab ecosystem.   * @param exchangeOfferId Any offer id for the exchange. Zero, or a positive integer.
  */
  public void getExchangeOffer (String exchangeId, String exchangeOfferId, final Response.Listener<ExchangeOffer> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'exchangeId' is set
    if (exchangeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'exchangeId' when calling getExchangeOffer",
        new ApiException(400, "Missing the required parameter 'exchangeId' when calling getExchangeOffer"));
    }
    // verify the required parameter 'exchangeOfferId' is set
    if (exchangeOfferId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'exchangeOfferId' when calling getExchangeOffer",
        new ApiException(400, "Missing the required parameter 'exchangeOfferId' when calling getExchangeOffer"));
    }

    // create path and map variables
    String path = "/v1/exchanges/{exchangeId}/items/{exchangeOfferId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "exchangeId" + "\\}", apiInvoker.escapeString(exchangeId.toString())).replaceAll("\\{" + "exchangeOfferId" + "\\}", apiInvoker.escapeString(exchangeOfferId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ExchangeOffer) ApiInvoker.deserialize(localVarResponse,  "", ExchangeOffer.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get exchange offers
  * Returns all exchange offers as an array of exchange offer objects.
   * @param exchangeId Any exchange id within the MetaFab ecosystem.
   * @return List<ExchangeOffer>
  */
  public List<ExchangeOffer> getExchangeOffers (String exchangeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'exchangeId' is set
    if (exchangeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'exchangeId' when calling getExchangeOffers",
        new ApiException(400, "Missing the required parameter 'exchangeId' when calling getExchangeOffers"));
    }

    // create path and map variables
    String path = "/v1/exchanges/{exchangeId}/offers".replaceAll("\\{" + "exchangeId" + "\\}", apiInvoker.escapeString(exchangeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<ExchangeOffer>) ApiInvoker.deserialize(localVarResponse, "array", ExchangeOffer.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get exchange offers
   * Returns all exchange offers as an array of exchange offer objects.
   * @param exchangeId Any exchange id within the MetaFab ecosystem.
  */
  public void getExchangeOffers (String exchangeId, final Response.Listener<List<ExchangeOffer>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'exchangeId' is set
    if (exchangeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'exchangeId' when calling getExchangeOffers",
        new ApiException(400, "Missing the required parameter 'exchangeId' when calling getExchangeOffers"));
    }

    // create path and map variables
    String path = "/v1/exchanges/{exchangeId}/offers".replaceAll("\\{format\\}","json").replaceAll("\\{" + "exchangeId" + "\\}", apiInvoker.escapeString(exchangeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<ExchangeOffer>) ApiInvoker.deserialize(localVarResponse,  "array", ExchangeOffer.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get exchanges
  * Returns an array of active exchanges for the game associated with the provided &#x60;X-Game-Key&#x60;.
   * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.
   * @return List<GetExchanges200ResponseInner>
  */
  public List<GetExchanges200ResponseInner> getExchanges (String xGameKey) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'xGameKey' is set
    if (xGameKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGameKey' when calling getExchanges",
        new ApiException(400, "Missing the required parameter 'xGameKey' when calling getExchanges"));
    }

    // create path and map variables
    String path = "/v1/exchanges";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Game-Key", ApiInvoker.parameterToString(xGameKey));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<GetExchanges200ResponseInner>) ApiInvoker.deserialize(localVarResponse, "array", GetExchanges200ResponseInner.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get exchanges
   * Returns an array of active exchanges for the game associated with the provided &#x60;X-Game-Key&#x60;.
   * @param xGameKey The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.
  */
  public void getExchanges (String xGameKey, final Response.Listener<List<GetExchanges200ResponseInner>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'xGameKey' is set
    if (xGameKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGameKey' when calling getExchanges",
        new ApiException(400, "Missing the required parameter 'xGameKey' when calling getExchanges"));
    }

    // create path and map variables
    String path = "/v1/exchanges".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Game-Key", ApiInvoker.parameterToString(xGameKey));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<GetExchanges200ResponseInner>) ApiInvoker.deserialize(localVarResponse,  "array", GetExchanges200ResponseInner.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Remove exchange offer
  * Removes the provided offerId from the provided exchange. Removed offers can no longer be used.
   * @param exchangeId Any exchange id within the MetaFab ecosystem.
   * @param exchangeOfferId Any offer id for the exchange. Zero, or a positive integer.
   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.
   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
   * @return TransactionModel
  */
  public TransactionModel removeExchangeOffer (String exchangeId, String exchangeOfferId, String xAuthorization, String xPassword) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'exchangeId' is set
    if (exchangeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'exchangeId' when calling removeExchangeOffer",
        new ApiException(400, "Missing the required parameter 'exchangeId' when calling removeExchangeOffer"));
    }
    // verify the required parameter 'exchangeOfferId' is set
    if (exchangeOfferId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'exchangeOfferId' when calling removeExchangeOffer",
        new ApiException(400, "Missing the required parameter 'exchangeOfferId' when calling removeExchangeOffer"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling removeExchangeOffer",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling removeExchangeOffer"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling removeExchangeOffer",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling removeExchangeOffer"));
    }

    // create path and map variables
    String path = "/v1/exchanges/{exchangeId}/offers/{exchangeOfferId}".replaceAll("\\{" + "exchangeId" + "\\}", apiInvoker.escapeString(exchangeId.toString())).replaceAll("\\{" + "exchangeOfferId" + "\\}", apiInvoker.escapeString(exchangeOfferId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TransactionModel) ApiInvoker.deserialize(localVarResponse, "", TransactionModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Remove exchange offer
   * Removes the provided offerId from the provided exchange. Removed offers can no longer be used.
   * @param exchangeId Any exchange id within the MetaFab ecosystem.   * @param exchangeOfferId Any offer id for the exchange. Zero, or a positive integer.   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
  */
  public void removeExchangeOffer (String exchangeId, String exchangeOfferId, String xAuthorization, String xPassword, final Response.Listener<TransactionModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'exchangeId' is set
    if (exchangeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'exchangeId' when calling removeExchangeOffer",
        new ApiException(400, "Missing the required parameter 'exchangeId' when calling removeExchangeOffer"));
    }
    // verify the required parameter 'exchangeOfferId' is set
    if (exchangeOfferId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'exchangeOfferId' when calling removeExchangeOffer",
        new ApiException(400, "Missing the required parameter 'exchangeOfferId' when calling removeExchangeOffer"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling removeExchangeOffer",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling removeExchangeOffer"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling removeExchangeOffer",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling removeExchangeOffer"));
    }

    // create path and map variables
    String path = "/v1/exchanges/{exchangeId}/offers/{exchangeOfferId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "exchangeId" + "\\}", apiInvoker.escapeString(exchangeId.toString())).replaceAll("\\{" + "exchangeOfferId" + "\\}", apiInvoker.escapeString(exchangeOfferId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TransactionModel) ApiInvoker.deserialize(localVarResponse,  "", TransactionModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Set exchange offer
  * Sets a new exchange offer or updates an existing one for the provided id. Exchange offers allow currency to item, item to currency or item to item exchanges.  All request fields besides &#x60;id&#x60; are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make an exchange offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
   * @param exchangeId Any exchange id within the MetaFab ecosystem.
   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.
   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
   * @param setExchangeOfferRequest 
   * @return TransactionModel
  */
  public TransactionModel setExchangeOffer (String exchangeId, String xAuthorization, String xPassword, SetExchangeOfferRequest setExchangeOfferRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = setExchangeOfferRequest;
    // verify the required parameter 'exchangeId' is set
    if (exchangeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'exchangeId' when calling setExchangeOffer",
        new ApiException(400, "Missing the required parameter 'exchangeId' when calling setExchangeOffer"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling setExchangeOffer",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling setExchangeOffer"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling setExchangeOffer",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling setExchangeOffer"));
    }
    // verify the required parameter 'setExchangeOfferRequest' is set
    if (setExchangeOfferRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'setExchangeOfferRequest' when calling setExchangeOffer",
        new ApiException(400, "Missing the required parameter 'setExchangeOfferRequest' when calling setExchangeOffer"));
    }

    // create path and map variables
    String path = "/v1/exchanges/{exchangeId}/offers".replaceAll("\\{" + "exchangeId" + "\\}", apiInvoker.escapeString(exchangeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TransactionModel) ApiInvoker.deserialize(localVarResponse, "", TransactionModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Set exchange offer
   * Sets a new exchange offer or updates an existing one for the provided id. Exchange offers allow currency to item, item to currency or item to item exchanges.  All request fields besides &#x60;id&#x60; are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make an exchange offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
   * @param exchangeId Any exchange id within the MetaFab ecosystem.   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.   * @param setExchangeOfferRequest 
  */
  public void setExchangeOffer (String exchangeId, String xAuthorization, String xPassword, SetExchangeOfferRequest setExchangeOfferRequest, final Response.Listener<TransactionModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = setExchangeOfferRequest;

    // verify the required parameter 'exchangeId' is set
    if (exchangeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'exchangeId' when calling setExchangeOffer",
        new ApiException(400, "Missing the required parameter 'exchangeId' when calling setExchangeOffer"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling setExchangeOffer",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling setExchangeOffer"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling setExchangeOffer",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling setExchangeOffer"));
    }
    // verify the required parameter 'setExchangeOfferRequest' is set
    if (setExchangeOfferRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'setExchangeOfferRequest' when calling setExchangeOffer",
        new ApiException(400, "Missing the required parameter 'setExchangeOfferRequest' when calling setExchangeOffer"));
    }

    // create path and map variables
    String path = "/v1/exchanges/{exchangeId}/offers".replaceAll("\\{format\\}","json").replaceAll("\\{" + "exchangeId" + "\\}", apiInvoker.escapeString(exchangeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TransactionModel) ApiInvoker.deserialize(localVarResponse,  "", TransactionModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Use exchange offer
  * Uses an exchange offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
   * @param exchangeId Any exchange id within the MetaFab ecosystem.
   * @param exchangeOfferId Any offer id for the exchange. Zero, or a positive integer.
   * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.
   * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
   * @return TransactionModel
  */
  public TransactionModel useExchangeOffer (String exchangeId, String exchangeOfferId, String xAuthorization, String xPassword) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'exchangeId' is set
    if (exchangeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'exchangeId' when calling useExchangeOffer",
        new ApiException(400, "Missing the required parameter 'exchangeId' when calling useExchangeOffer"));
    }
    // verify the required parameter 'exchangeOfferId' is set
    if (exchangeOfferId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'exchangeOfferId' when calling useExchangeOffer",
        new ApiException(400, "Missing the required parameter 'exchangeOfferId' when calling useExchangeOffer"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling useExchangeOffer",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling useExchangeOffer"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling useExchangeOffer",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling useExchangeOffer"));
    }

    // create path and map variables
    String path = "/v1/exchanges/{exchangeId}/offers/{exchangeOfferId}/uses".replaceAll("\\{" + "exchangeId" + "\\}", apiInvoker.escapeString(exchangeId.toString())).replaceAll("\\{" + "exchangeOfferId" + "\\}", apiInvoker.escapeString(exchangeOfferId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TransactionModel) ApiInvoker.deserialize(localVarResponse, "", TransactionModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Use exchange offer
   * Uses an exchange offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
   * @param exchangeId Any exchange id within the MetaFab ecosystem.   * @param exchangeOfferId Any offer id for the exchange. Zero, or a positive integer.   * @param xAuthorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.   * @param xPassword The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.
  */
  public void useExchangeOffer (String exchangeId, String exchangeOfferId, String xAuthorization, String xPassword, final Response.Listener<TransactionModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'exchangeId' is set
    if (exchangeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'exchangeId' when calling useExchangeOffer",
        new ApiException(400, "Missing the required parameter 'exchangeId' when calling useExchangeOffer"));
    }
    // verify the required parameter 'exchangeOfferId' is set
    if (exchangeOfferId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'exchangeOfferId' when calling useExchangeOffer",
        new ApiException(400, "Missing the required parameter 'exchangeOfferId' when calling useExchangeOffer"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling useExchangeOffer",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling useExchangeOffer"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling useExchangeOffer",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling useExchangeOffer"));
    }

    // create path and map variables
    String path = "/v1/exchanges/{exchangeId}/offers/{exchangeOfferId}/uses".replaceAll("\\{format\\}","json").replaceAll("\\{" + "exchangeId" + "\\}", apiInvoker.escapeString(exchangeId.toString())).replaceAll("\\{" + "exchangeOfferId" + "\\}", apiInvoker.escapeString(exchangeOfferId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TransactionModel) ApiInvoker.deserialize(localVarResponse,  "", TransactionModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Withdraw from exchange
  * Withdraws native token, currency or items from a exchange. Whenever an exchange offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the exchange contract when the offer is used. These can be withdrawn to any other address.
   * @param exchangeId Any exchange id within the MetaFab ecosystem.
   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.
   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.
   * @param withdrawFromExchangeRequest 
   * @return TransactionModel
  */
  public TransactionModel withdrawFromExchange (String exchangeId, String xAuthorization, String xPassword, WithdrawFromExchangeRequest withdrawFromExchangeRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = withdrawFromExchangeRequest;
    // verify the required parameter 'exchangeId' is set
    if (exchangeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'exchangeId' when calling withdrawFromExchange",
        new ApiException(400, "Missing the required parameter 'exchangeId' when calling withdrawFromExchange"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling withdrawFromExchange",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling withdrawFromExchange"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling withdrawFromExchange",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling withdrawFromExchange"));
    }
    // verify the required parameter 'withdrawFromExchangeRequest' is set
    if (withdrawFromExchangeRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'withdrawFromExchangeRequest' when calling withdrawFromExchange",
        new ApiException(400, "Missing the required parameter 'withdrawFromExchangeRequest' when calling withdrawFromExchange"));
    }

    // create path and map variables
    String path = "/v1/exchanges/{exchangeId}/withdrawals".replaceAll("\\{" + "exchangeId" + "\\}", apiInvoker.escapeString(exchangeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TransactionModel) ApiInvoker.deserialize(localVarResponse, "", TransactionModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Withdraw from exchange
   * Withdraws native token, currency or items from a exchange. Whenever an exchange offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the exchange contract when the offer is used. These can be withdrawn to any other address.
   * @param exchangeId Any exchange id within the MetaFab ecosystem.   * @param xAuthorization The &#x60;secretKey&#x60; of the authenticating game.   * @param xPassword The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.   * @param withdrawFromExchangeRequest 
  */
  public void withdrawFromExchange (String exchangeId, String xAuthorization, String xPassword, WithdrawFromExchangeRequest withdrawFromExchangeRequest, final Response.Listener<TransactionModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = withdrawFromExchangeRequest;

    // verify the required parameter 'exchangeId' is set
    if (exchangeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'exchangeId' when calling withdrawFromExchange",
        new ApiException(400, "Missing the required parameter 'exchangeId' when calling withdrawFromExchange"));
    }
    // verify the required parameter 'xAuthorization' is set
    if (xAuthorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xAuthorization' when calling withdrawFromExchange",
        new ApiException(400, "Missing the required parameter 'xAuthorization' when calling withdrawFromExchange"));
    }
    // verify the required parameter 'xPassword' is set
    if (xPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xPassword' when calling withdrawFromExchange",
        new ApiException(400, "Missing the required parameter 'xPassword' when calling withdrawFromExchange"));
    }
    // verify the required parameter 'withdrawFromExchangeRequest' is set
    if (withdrawFromExchangeRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'withdrawFromExchangeRequest' when calling withdrawFromExchange",
        new ApiException(400, "Missing the required parameter 'withdrawFromExchangeRequest' when calling withdrawFromExchange"));
    }

    // create path and map variables
    String path = "/v1/exchanges/{exchangeId}/withdrawals".replaceAll("\\{format\\}","json").replaceAll("\\{" + "exchangeId" + "\\}", apiInvoker.escapeString(exchangeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("X-Authorization", ApiInvoker.parameterToString(xAuthorization));
    headerParams.put("X-Password", ApiInvoker.parameterToString(xPassword));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TransactionModel) ApiInvoker.deserialize(localVarResponse,  "", TransactionModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
